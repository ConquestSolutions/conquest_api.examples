// Code generated by go-swagger; DO NOT EDIT.

package action_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new action service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for action service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ActionServiceApplyStandardAction(params *ActionServiceApplyStandardActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionServiceApplyStandardActionOK, error)

	ActionServiceCompleteAction(params *ActionServiceCompleteActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionServiceCompleteActionOK, error)

	ActionServiceCreateSucceedingAction(params *ActionServiceCreateSucceedingActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionServiceCreateSucceedingActionOK, error)

	ActionServiceDeleteAction(params *ActionServiceDeleteActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionServiceDeleteActionOK, error)

	ActionServiceGetAction(params *ActionServiceGetActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionServiceGetActionOK, error)

	ActionServiceGetActionCompletionDetails(params *ActionServiceGetActionCompletionDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionServiceGetActionCompletionDetailsOK, error)

	ActionServiceMoveAction(params *ActionServiceMoveActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionServiceMoveActionOK, error)

	ActionServiceReverseActionCompletion(params *ActionServiceReverseActionCompletionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionServiceReverseActionCompletionOK, error)

	ActionServiceUpdateAction(params *ActionServiceUpdateActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionServiceUpdateActionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ActionServiceApplyStandardAction action service apply standard action API
*/
func (a *Client) ActionServiceApplyStandardAction(params *ActionServiceApplyStandardActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionServiceApplyStandardActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionServiceApplyStandardActionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActionService_ApplyStandardAction",
		Method:             "POST",
		PathPattern:        "/api/actions/apply_standard_action",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActionServiceApplyStandardActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionServiceApplyStandardActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionServiceApplyStandardActionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ActionServiceCompleteAction action service complete action API
*/
func (a *Client) ActionServiceCompleteAction(params *ActionServiceCompleteActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionServiceCompleteActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionServiceCompleteActionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActionService_CompleteAction",
		Method:             "POST",
		PathPattern:        "/api/actions/complete_action",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActionServiceCompleteActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionServiceCompleteActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionServiceCompleteActionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ActionServiceCreateSucceedingAction action service create succeeding action API
*/
func (a *Client) ActionServiceCreateSucceedingAction(params *ActionServiceCreateSucceedingActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionServiceCreateSucceedingActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionServiceCreateSucceedingActionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActionService_CreateSucceedingAction",
		Method:             "POST",
		PathPattern:        "/api/actions/create_succeeding_action",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActionServiceCreateSucceedingActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionServiceCreateSucceedingActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionServiceCreateSucceedingActionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ActionServiceDeleteAction action service delete action API
*/
func (a *Client) ActionServiceDeleteAction(params *ActionServiceDeleteActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionServiceDeleteActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionServiceDeleteActionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActionService_DeleteAction",
		Method:             "POST",
		PathPattern:        "/api/actions/delete_action",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActionServiceDeleteActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionServiceDeleteActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionServiceDeleteActionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ActionServiceGetAction action service get action API
*/
func (a *Client) ActionServiceGetAction(params *ActionServiceGetActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionServiceGetActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionServiceGetActionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActionService_GetAction",
		Method:             "GET",
		PathPattern:        "/api/actions/{value}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActionServiceGetActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionServiceGetActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionServiceGetActionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ActionServiceGetActionCompletionDetails action service get action completion details API
*/
func (a *Client) ActionServiceGetActionCompletionDetails(params *ActionServiceGetActionCompletionDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionServiceGetActionCompletionDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionServiceGetActionCompletionDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActionService_GetActionCompletionDetails",
		Method:             "POST",
		PathPattern:        "/api/actions/completion_details",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActionServiceGetActionCompletionDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionServiceGetActionCompletionDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionServiceGetActionCompletionDetailsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ActionServiceMoveAction action service move action API
*/
func (a *Client) ActionServiceMoveAction(params *ActionServiceMoveActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionServiceMoveActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionServiceMoveActionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActionService_MoveAction",
		Method:             "POST",
		PathPattern:        "/api/actions/move_action",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActionServiceMoveActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionServiceMoveActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionServiceMoveActionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ActionServiceReverseActionCompletion action service reverse action completion API
*/
func (a *Client) ActionServiceReverseActionCompletion(params *ActionServiceReverseActionCompletionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionServiceReverseActionCompletionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionServiceReverseActionCompletionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActionService_ReverseActionCompletion",
		Method:             "POST",
		PathPattern:        "/api/actions/reverse_action_completion",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActionServiceReverseActionCompletionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionServiceReverseActionCompletionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionServiceReverseActionCompletionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ActionServiceUpdateAction action service update action API
*/
func (a *Client) ActionServiceUpdateAction(params *ActionServiceUpdateActionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActionServiceUpdateActionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActionServiceUpdateActionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ActionService_UpdateAction",
		Method:             "POST",
		PathPattern:        "/api/actions/update_action",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ActionServiceUpdateActionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActionServiceUpdateActionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ActionServiceUpdateActionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
