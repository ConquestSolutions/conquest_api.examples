// Code generated by go-swagger; DO NOT EDIT.

package asset_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new asset service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for asset service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AssetServiceChangeAssetType(params *AssetServiceChangeAssetTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetServiceChangeAssetTypeOK, error)

	AssetServiceCopyAsset(params *AssetServiceCopyAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetServiceCopyAssetOK, error)

	AssetServiceCreateActionForAsset(params *AssetServiceCreateActionForAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetServiceCreateActionForAssetOK, error)

	AssetServiceCreateAsset(params *AssetServiceCreateAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetServiceCreateAssetOK, error)

	AssetServiceCreateDefectForAsset(params *AssetServiceCreateDefectForAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetServiceCreateDefectForAssetOK, error)

	AssetServiceDeleteAsset(params *AssetServiceDeleteAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetServiceDeleteAssetOK, error)

	AssetServiceGetAsset(params *AssetServiceGetAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetServiceGetAssetOK, error)

	AssetServiceListInspectionsForAsset(params *AssetServiceListInspectionsForAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetServiceListInspectionsForAssetOK, error)

	AssetServiceMoveAsset(params *AssetServiceMoveAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetServiceMoveAssetOK, error)

	AssetServiceNewConditionInspection(params *AssetServiceNewConditionInspectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetServiceNewConditionInspectionOK, error)

	AssetServiceTagAsInspected(params *AssetServiceTagAsInspectedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetServiceTagAsInspectedOK, error)

	AssetServiceUpdateAsset(params *AssetServiceUpdateAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetServiceUpdateAssetOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AssetServiceChangeAssetType asset service change asset type API
*/
func (a *Client) AssetServiceChangeAssetType(params *AssetServiceChangeAssetTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetServiceChangeAssetTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssetServiceChangeAssetTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssetService_ChangeAssetType",
		Method:             "POST",
		PathPattern:        "/api/assets/change_asset_type",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssetServiceChangeAssetTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssetServiceChangeAssetTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssetServiceChangeAssetTypeDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AssetServiceCopyAsset asset service copy asset API
*/
func (a *Client) AssetServiceCopyAsset(params *AssetServiceCopyAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetServiceCopyAssetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssetServiceCopyAssetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssetService_CopyAsset",
		Method:             "POST",
		PathPattern:        "/api/assets/copy_asset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssetServiceCopyAssetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssetServiceCopyAssetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssetServiceCopyAssetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AssetServiceCreateActionForAsset asset service create action for asset API
*/
func (a *Client) AssetServiceCreateActionForAsset(params *AssetServiceCreateActionForAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetServiceCreateActionForAssetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssetServiceCreateActionForAssetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssetService_CreateActionForAsset",
		Method:             "POST",
		PathPattern:        "/api/assets/create_action",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssetServiceCreateActionForAssetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssetServiceCreateActionForAssetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssetServiceCreateActionForAssetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AssetServiceCreateAsset asset service create asset API
*/
func (a *Client) AssetServiceCreateAsset(params *AssetServiceCreateAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetServiceCreateAssetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssetServiceCreateAssetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssetService_CreateAsset",
		Method:             "POST",
		PathPattern:        "/api/assets/create_asset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssetServiceCreateAssetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssetServiceCreateAssetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssetServiceCreateAssetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AssetServiceCreateDefectForAsset asset service create defect for asset API
*/
func (a *Client) AssetServiceCreateDefectForAsset(params *AssetServiceCreateDefectForAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetServiceCreateDefectForAssetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssetServiceCreateDefectForAssetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssetService_CreateDefectForAsset",
		Method:             "POST",
		PathPattern:        "/api/assets/create_defect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssetServiceCreateDefectForAssetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssetServiceCreateDefectForAssetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssetServiceCreateDefectForAssetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AssetServiceDeleteAsset asset service delete asset API
*/
func (a *Client) AssetServiceDeleteAsset(params *AssetServiceDeleteAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetServiceDeleteAssetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssetServiceDeleteAssetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssetService_DeleteAsset",
		Method:             "POST",
		PathPattern:        "/api/assets/delete_asset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssetServiceDeleteAssetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssetServiceDeleteAssetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssetServiceDeleteAssetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AssetServiceGetAsset asset service get asset API
*/
func (a *Client) AssetServiceGetAsset(params *AssetServiceGetAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetServiceGetAssetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssetServiceGetAssetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssetService_GetAsset",
		Method:             "GET",
		PathPattern:        "/api/assets/{value}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssetServiceGetAssetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssetServiceGetAssetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssetServiceGetAssetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AssetServiceListInspectionsForAsset asset service list inspections for asset API
*/
func (a *Client) AssetServiceListInspectionsForAsset(params *AssetServiceListInspectionsForAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetServiceListInspectionsForAssetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssetServiceListInspectionsForAssetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssetService_ListInspectionsForAsset",
		Method:             "POST",
		PathPattern:        "/api/assets/list_inspections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssetServiceListInspectionsForAssetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssetServiceListInspectionsForAssetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssetServiceListInspectionsForAssetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AssetServiceMoveAsset asset service move asset API
*/
func (a *Client) AssetServiceMoveAsset(params *AssetServiceMoveAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetServiceMoveAssetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssetServiceMoveAssetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssetService_MoveAsset",
		Method:             "POST",
		PathPattern:        "/api/assets/move_asset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssetServiceMoveAssetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssetServiceMoveAssetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssetServiceMoveAssetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AssetServiceNewConditionInspection asset service new condition inspection API
*/
func (a *Client) AssetServiceNewConditionInspection(params *AssetServiceNewConditionInspectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetServiceNewConditionInspectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssetServiceNewConditionInspectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssetService_NewConditionInspection",
		Method:             "POST",
		PathPattern:        "/api/assets/new_condition_inspection",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssetServiceNewConditionInspectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssetServiceNewConditionInspectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssetServiceNewConditionInspectionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AssetServiceTagAsInspected asset service tag as inspected API
*/
func (a *Client) AssetServiceTagAsInspected(params *AssetServiceTagAsInspectedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetServiceTagAsInspectedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssetServiceTagAsInspectedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssetService_TagAsInspected",
		Method:             "POST",
		PathPattern:        "/api/assets/tag_as_inspected",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssetServiceTagAsInspectedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssetServiceTagAsInspectedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssetServiceTagAsInspectedDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AssetServiceUpdateAsset asset service update asset API
*/
func (a *Client) AssetServiceUpdateAsset(params *AssetServiceUpdateAssetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AssetServiceUpdateAssetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssetServiceUpdateAssetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "AssetService_UpdateAsset",
		Method:             "POST",
		PathPattern:        "/api/assets/update_asset",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AssetServiceUpdateAssetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssetServiceUpdateAssetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AssetServiceUpdateAssetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
