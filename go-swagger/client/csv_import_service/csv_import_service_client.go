// Code generated by go-swagger; DO NOT EDIT.

package csv_import_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new csv import service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for csv import service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CsvImportServiceAddCsvImport(params *CsvImportServiceAddCsvImportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CsvImportServiceAddCsvImportOK, error)

	CsvImportServiceDeleteCsvImport(params *CsvImportServiceDeleteCsvImportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CsvImportServiceDeleteCsvImportOK, error)

	CsvImportServiceGetCsvImportState(params *CsvImportServiceGetCsvImportStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CsvImportServiceGetCsvImportStateOK, error)

	CsvImportServiceStartCsvImport(params *CsvImportServiceStartCsvImportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CsvImportServiceStartCsvImportOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CsvImportServiceAddCsvImport csv import service add csv import API
*/
func (a *Client) CsvImportServiceAddCsvImport(params *CsvImportServiceAddCsvImportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CsvImportServiceAddCsvImportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCsvImportServiceAddCsvImportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CsvImportService_AddCsvImport",
		Method:             "POST",
		PathPattern:        "/api/import/add/{ImportType}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CsvImportServiceAddCsvImportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CsvImportServiceAddCsvImportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CsvImportServiceAddCsvImportDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CsvImportServiceDeleteCsvImport removes import
*/
func (a *Client) CsvImportServiceDeleteCsvImport(params *CsvImportServiceDeleteCsvImportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CsvImportServiceDeleteCsvImportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCsvImportServiceDeleteCsvImportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CsvImportService_DeleteCsvImport",
		Method:             "DELETE",
		PathPattern:        "/api/import/delete/{JobID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CsvImportServiceDeleteCsvImportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CsvImportServiceDeleteCsvImportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CsvImportServiceDeleteCsvImportDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CsvImportServiceGetCsvImportState gets status for import
*/
func (a *Client) CsvImportServiceGetCsvImportState(params *CsvImportServiceGetCsvImportStateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CsvImportServiceGetCsvImportStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCsvImportServiceGetCsvImportStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CsvImportService_GetCsvImportState",
		Method:             "GET",
		PathPattern:        "/api/import/state/{JobID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CsvImportServiceGetCsvImportStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CsvImportServiceGetCsvImportStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CsvImportServiceGetCsvImportStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CsvImportServiceStartCsvImport csv import service start csv import API
*/
func (a *Client) CsvImportServiceStartCsvImport(params *CsvImportServiceStartCsvImportParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CsvImportServiceStartCsvImportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCsvImportServiceStartCsvImportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CsvImportService_StartCsvImport",
		Method:             "POST",
		PathPattern:        "/api/import/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CsvImportServiceStartCsvImportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CsvImportServiceStartCsvImportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CsvImportServiceStartCsvImportDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
