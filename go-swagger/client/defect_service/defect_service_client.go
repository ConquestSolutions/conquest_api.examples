// Code generated by go-swagger; DO NOT EDIT.

package defect_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new defect service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for defect service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DefectServiceCalculateDefectResponseDate(params *DefectServiceCalculateDefectResponseDateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DefectServiceCalculateDefectResponseDateOK, error)

	DefectServiceCompleteDefect(params *DefectServiceCompleteDefectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DefectServiceCompleteDefectOK, error)

	DefectServiceCreateActionForDefect(params *DefectServiceCreateActionForDefectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DefectServiceCreateActionForDefectOK, error)

	DefectServiceDeleteDefect(params *DefectServiceDeleteDefectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DefectServiceDeleteDefectOK, error)

	DefectServiceGetDefect(params *DefectServiceGetDefectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DefectServiceGetDefectOK, error)

	DefectServiceUpdateDefect(params *DefectServiceUpdateDefectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DefectServiceUpdateDefectOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DefectServiceCalculateDefectResponseDate defect service calculate defect response date API
*/
func (a *Client) DefectServiceCalculateDefectResponseDate(params *DefectServiceCalculateDefectResponseDateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DefectServiceCalculateDefectResponseDateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDefectServiceCalculateDefectResponseDateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DefectService_CalculateDefectResponseDate",
		Method:             "POST",
		PathPattern:        "/api/defects/calculate_defect_response_date",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DefectServiceCalculateDefectResponseDateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DefectServiceCalculateDefectResponseDateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DefectServiceCalculateDefectResponseDateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DefectServiceCompleteDefect defect service complete defect API
*/
func (a *Client) DefectServiceCompleteDefect(params *DefectServiceCompleteDefectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DefectServiceCompleteDefectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDefectServiceCompleteDefectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DefectService_CompleteDefect",
		Method:             "POST",
		PathPattern:        "/api/defects/complete_defect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DefectServiceCompleteDefectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DefectServiceCompleteDefectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DefectServiceCompleteDefectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DefectServiceCreateActionForDefect defect service create action for defect API
*/
func (a *Client) DefectServiceCreateActionForDefect(params *DefectServiceCreateActionForDefectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DefectServiceCreateActionForDefectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDefectServiceCreateActionForDefectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DefectService_CreateActionForDefect",
		Method:             "POST",
		PathPattern:        "/api/defects/create_action",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DefectServiceCreateActionForDefectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DefectServiceCreateActionForDefectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DefectServiceCreateActionForDefectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DefectServiceDeleteDefect defect service delete defect API
*/
func (a *Client) DefectServiceDeleteDefect(params *DefectServiceDeleteDefectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DefectServiceDeleteDefectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDefectServiceDeleteDefectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DefectService_DeleteDefect",
		Method:             "POST",
		PathPattern:        "/api/defects/delete_defect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DefectServiceDeleteDefectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DefectServiceDeleteDefectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DefectServiceDeleteDefectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DefectServiceGetDefect defect service get defect API
*/
func (a *Client) DefectServiceGetDefect(params *DefectServiceGetDefectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DefectServiceGetDefectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDefectServiceGetDefectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DefectService_GetDefect",
		Method:             "GET",
		PathPattern:        "/api/defects/{value}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DefectServiceGetDefectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DefectServiceGetDefectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DefectServiceGetDefectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DefectServiceUpdateDefect defect service update defect API
*/
func (a *Client) DefectServiceUpdateDefect(params *DefectServiceUpdateDefectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DefectServiceUpdateDefectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDefectServiceUpdateDefectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DefectService_UpdateDefect",
		Method:             "POST",
		PathPattern:        "/api/defects/update_defect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DefectServiceUpdateDefectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DefectServiceUpdateDefectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DefectServiceUpdateDefectDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
