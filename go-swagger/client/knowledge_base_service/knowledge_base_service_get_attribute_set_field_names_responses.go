// Code generated by go-swagger; DO NOT EDIT.

package knowledge_base_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ConquestSolutions/conquest_api.examples/go-swagger/models"
)

// KnowledgeBaseServiceGetAttributeSetFieldNamesReader is a Reader for the KnowledgeBaseServiceGetAttributeSetFieldNames structure.
type KnowledgeBaseServiceGetAttributeSetFieldNamesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *KnowledgeBaseServiceGetAttributeSetFieldNamesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewKnowledgeBaseServiceGetAttributeSetFieldNamesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewKnowledgeBaseServiceGetAttributeSetFieldNamesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewKnowledgeBaseServiceGetAttributeSetFieldNamesOK creates a KnowledgeBaseServiceGetAttributeSetFieldNamesOK with default headers values
func NewKnowledgeBaseServiceGetAttributeSetFieldNamesOK() *KnowledgeBaseServiceGetAttributeSetFieldNamesOK {
	return &KnowledgeBaseServiceGetAttributeSetFieldNamesOK{}
}

/* KnowledgeBaseServiceGetAttributeSetFieldNamesOK describes a response with status code 200, with default header values.

A successful response.
*/
type KnowledgeBaseServiceGetAttributeSetFieldNamesOK struct {
	Payload *models.ConquestAPIGetAttributeSetFieldNamesResponse
}

func (o *KnowledgeBaseServiceGetAttributeSetFieldNamesOK) Error() string {
	return fmt.Sprintf("[POST /api/knowledge_base/list_field_names_for_attribute_set][%d] knowledgeBaseServiceGetAttributeSetFieldNamesOK  %+v", 200, o.Payload)
}
func (o *KnowledgeBaseServiceGetAttributeSetFieldNamesOK) GetPayload() *models.ConquestAPIGetAttributeSetFieldNamesResponse {
	return o.Payload
}

func (o *KnowledgeBaseServiceGetAttributeSetFieldNamesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConquestAPIGetAttributeSetFieldNamesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKnowledgeBaseServiceGetAttributeSetFieldNamesDefault creates a KnowledgeBaseServiceGetAttributeSetFieldNamesDefault with default headers values
func NewKnowledgeBaseServiceGetAttributeSetFieldNamesDefault(code int) *KnowledgeBaseServiceGetAttributeSetFieldNamesDefault {
	return &KnowledgeBaseServiceGetAttributeSetFieldNamesDefault{
		_statusCode: code,
	}
}

/* KnowledgeBaseServiceGetAttributeSetFieldNamesDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type KnowledgeBaseServiceGetAttributeSetFieldNamesDefault struct {
	_statusCode int

	Payload *models.RuntimeError
}

// Code gets the status code for the knowledge base service get attribute set field names default response
func (o *KnowledgeBaseServiceGetAttributeSetFieldNamesDefault) Code() int {
	return o._statusCode
}

func (o *KnowledgeBaseServiceGetAttributeSetFieldNamesDefault) Error() string {
	return fmt.Sprintf("[POST /api/knowledge_base/list_field_names_for_attribute_set][%d] KnowledgeBaseService_GetAttributeSetFieldNames default  %+v", o._statusCode, o.Payload)
}
func (o *KnowledgeBaseServiceGetAttributeSetFieldNamesDefault) GetPayload() *models.RuntimeError {
	return o.Payload
}

func (o *KnowledgeBaseServiceGetAttributeSetFieldNamesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
