// Code generated by go-swagger; DO NOT EDIT.

package knowledge_base_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/ConquestSolutions/conquest_api.examples/go-swagger/models"
)

// KnowledgeBaseServiceListStandardDefectResponsesReader is a Reader for the KnowledgeBaseServiceListStandardDefectResponses structure.
type KnowledgeBaseServiceListStandardDefectResponsesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *KnowledgeBaseServiceListStandardDefectResponsesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewKnowledgeBaseServiceListStandardDefectResponsesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewKnowledgeBaseServiceListStandardDefectResponsesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewKnowledgeBaseServiceListStandardDefectResponsesOK creates a KnowledgeBaseServiceListStandardDefectResponsesOK with default headers values
func NewKnowledgeBaseServiceListStandardDefectResponsesOK() *KnowledgeBaseServiceListStandardDefectResponsesOK {
	return &KnowledgeBaseServiceListStandardDefectResponsesOK{}
}

/* KnowledgeBaseServiceListStandardDefectResponsesOK describes a response with status code 200, with default header values.

A successful response.
*/
type KnowledgeBaseServiceListStandardDefectResponsesOK struct {
	Payload *models.ConquestAPIListStandardDefectResponsesResult
}

func (o *KnowledgeBaseServiceListStandardDefectResponsesOK) Error() string {
	return fmt.Sprintf("[POST /api/knowledge_base/list_standard_defect_responses][%d] knowledgeBaseServiceListStandardDefectResponsesOK  %+v", 200, o.Payload)
}
func (o *KnowledgeBaseServiceListStandardDefectResponsesOK) GetPayload() *models.ConquestAPIListStandardDefectResponsesResult {
	return o.Payload
}

func (o *KnowledgeBaseServiceListStandardDefectResponsesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ConquestAPIListStandardDefectResponsesResult)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKnowledgeBaseServiceListStandardDefectResponsesDefault creates a KnowledgeBaseServiceListStandardDefectResponsesDefault with default headers values
func NewKnowledgeBaseServiceListStandardDefectResponsesDefault(code int) *KnowledgeBaseServiceListStandardDefectResponsesDefault {
	return &KnowledgeBaseServiceListStandardDefectResponsesDefault{
		_statusCode: code,
	}
}

/* KnowledgeBaseServiceListStandardDefectResponsesDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type KnowledgeBaseServiceListStandardDefectResponsesDefault struct {
	_statusCode int

	Payload *models.RuntimeError
}

// Code gets the status code for the knowledge base service list standard defect responses default response
func (o *KnowledgeBaseServiceListStandardDefectResponsesDefault) Code() int {
	return o._statusCode
}

func (o *KnowledgeBaseServiceListStandardDefectResponsesDefault) Error() string {
	return fmt.Sprintf("[POST /api/knowledge_base/list_standard_defect_responses][%d] KnowledgeBaseService_ListStandardDefectResponses default  %+v", o._statusCode, o.Payload)
}
func (o *KnowledgeBaseServiceListStandardDefectResponsesDefault) GetPayload() *models.RuntimeError {
	return o.Payload
}

func (o *KnowledgeBaseServiceListStandardDefectResponsesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RuntimeError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
