// Code generated by go-swagger; DO NOT EDIT.

package request_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new request service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for request service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	RequestServiceCreateRequest(params *RequestServiceCreateRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RequestServiceCreateRequestOK, error)

	RequestServiceDeleteRequest(params *RequestServiceDeleteRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RequestServiceDeleteRequestOK, error)

	RequestServiceGetRequest(params *RequestServiceGetRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RequestServiceGetRequestOK, error)

	RequestServiceUpdateRequest(params *RequestServiceUpdateRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RequestServiceUpdateRequestOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  RequestServiceCreateRequest request service create request API
*/
func (a *Client) RequestServiceCreateRequest(params *RequestServiceCreateRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RequestServiceCreateRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRequestServiceCreateRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RequestService_CreateRequest",
		Method:             "POST",
		PathPattern:        "/api/requests/create_request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RequestServiceCreateRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RequestServiceCreateRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RequestServiceCreateRequestDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RequestServiceDeleteRequest request service delete request API
*/
func (a *Client) RequestServiceDeleteRequest(params *RequestServiceDeleteRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RequestServiceDeleteRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRequestServiceDeleteRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RequestService_DeleteRequest",
		Method:             "POST",
		PathPattern:        "/api/requests/delete_request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RequestServiceDeleteRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RequestServiceDeleteRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RequestServiceDeleteRequestDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RequestServiceGetRequest request service get request API
*/
func (a *Client) RequestServiceGetRequest(params *RequestServiceGetRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RequestServiceGetRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRequestServiceGetRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RequestService_GetRequest",
		Method:             "GET",
		PathPattern:        "/api/requests/{value}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RequestServiceGetRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RequestServiceGetRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RequestServiceGetRequestDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RequestServiceUpdateRequest request service update request API
*/
func (a *Client) RequestServiceUpdateRequest(params *RequestServiceUpdateRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RequestServiceUpdateRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRequestServiceUpdateRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RequestService_UpdateRequest",
		Method:             "POST",
		PathPattern:        "/api/requests/update_request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RequestServiceUpdateRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RequestServiceUpdateRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RequestServiceUpdateRequestDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
