// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConquestAPIActionTask conquest api action task
//
// swagger:model conquest_apiActionTask
type ConquestAPIActionTask struct {

	// action assignments
	ActionAssignments []*ConquestAPIActionAssignment `json:"ActionAssignments"`

	// duration
	Duration float64 `json:"Duration,omitempty"`

	// ordr
	Ordr int32 `json:"Ordr,omitempty"`

	// start date
	// Format: date-time
	StartDate strfmt.DateTime `json:"StartDate,omitempty"`

	// task ID
	TaskID int32 `json:"TaskID,omitempty"`

	// task name
	TaskName string `json:"TaskName,omitempty"`
}

// Validate validates this conquest api action task
func (m *ConquestAPIActionTask) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionAssignments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIActionTask) validateActionAssignments(formats strfmt.Registry) error {
	if swag.IsZero(m.ActionAssignments) { // not required
		return nil
	}

	for i := 0; i < len(m.ActionAssignments); i++ {
		if swag.IsZero(m.ActionAssignments[i]) { // not required
			continue
		}

		if m.ActionAssignments[i] != nil {
			if err := m.ActionAssignments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ActionAssignments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ActionAssignments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConquestAPIActionTask) validateStartDate(formats strfmt.Registry) error {
	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("StartDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this conquest api action task based on the context it is used
func (m *ConquestAPIActionTask) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActionAssignments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIActionTask) contextValidateActionAssignments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ActionAssignments); i++ {

		if m.ActionAssignments[i] != nil {
			if err := m.ActionAssignments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ActionAssignments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ActionAssignments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConquestAPIActionTask) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConquestAPIActionTask) UnmarshalBinary(b []byte) error {
	var res ConquestAPIActionTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
