// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConquestAPIAddDocumentCommand AddDocumentCommand works in two steps, first you add a record using this command.
//
// If content must be uploaded, see AddDocumentResult, it contains parameters required for an uploading data:
// - UploadMethod
// - UploadURI
// - UploadHeaders
//
// swagger:model conquest_apiAddDocumentCommand
type ConquestAPIAddDocumentCommand struct {

	// Address is a URI with a supported scheme (blob://, file://, https://, conquest://, trim://).
	//
	// Addresses tell the server in what location a document should be put. Use ListDocumentLocationsQuery to list available locations.
	//
	// Locations are pre-defined and are identified by prefixes, which are of the form "{scheme}://{location-name}".
	//
	// The default location, known as the "System Document Directory" is
	//
	// - "file://conquest_documents/" for site installations
	//
	// - "blob://default/" for cloud installations (the location name may differ).
	//
	// When choosing an address, prefix it with a known location, followed by a relative path. For example:
	//
	//      "blob://default/Assets/1/receipt.txt"
	//
	// After a successful upload, reference this document using both the ObjectKey and the returned Document.DocumentID when using the download endpoint. For example:
	//
	//      "/download/document?object_type=...&object_id=...&document_id=..."
	//
	// This endpoint may redirect you to a download (by providing an address in the Location header).
	//
	// TRIM:
	//
	// The server identifies that it is TRIM file upload by looking at the Address starting with "trim://"
	//
	// - For new TRIM file, Address - "trim://new-file"
	//
	//      While uploading a new TRIM file, the AddDocumentCommand returns with a TRIM blob url location to upload the selected file.
	//
	// - For existing TRIM file, Address - trim://{RecordNumber}
	//
	//      The existing TRIM file is same as a document link in the database
	Address string `json:"Address,omitempty"`

	// content length
	ContentLength string `json:"ContentLength,omitempty"`

	// content type
	ContentType string `json:"ContentType,omitempty"`

	// CreateTime is unique. When adding a document, there is no DocumentID yet, the CreateTime should be used as a key until the DocumentID is retrieved.
	// Format: date-time
	CreateTime strfmt.DateTime `json:"CreateTime,omitempty"`

	// document description
	DocumentDescription string `json:"DocumentDescription,omitempty"`

	// A list of calculated hashes / checksum of the file to be uploaded.
	Hashes []string `json:"Hashes"`

	// When you wish to reference a document that will not be uploaded, set LinkExistingDocument to true and provide an Address
	LinkExistingDocument bool `json:"LinkExistingDocument,omitempty"`

	// Locations are pre-defined and are identified by prefixes, which are of the form "{scheme}://{location-name}".
	//
	// Prefixes are chosen by the client in a picker
	LocationPrefix string `json:"LocationPrefix,omitempty"`

	// ObjectKey (please reference the ObjectKey documentation).
	ObjectKey *ConquestAPIObjectKey `json:"ObjectKey,omitempty"`
}

// Validate validates this conquest api add document command
func (m *ConquestAPIAddDocumentCommand) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIAddDocumentCommand) validateCreateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("CreateTime", "body", "date-time", m.CreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConquestAPIAddDocumentCommand) validateObjectKey(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectKey) { // not required
		return nil
	}

	if m.ObjectKey != nil {
		if err := m.ObjectKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ObjectKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ObjectKey")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this conquest api add document command based on the context it is used
func (m *ConquestAPIAddDocumentCommand) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjectKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIAddDocumentCommand) contextValidateObjectKey(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectKey != nil {
		if err := m.ObjectKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ObjectKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ObjectKey")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConquestAPIAddDocumentCommand) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConquestAPIAddDocumentCommand) UnmarshalBinary(b []byte) error {
	var res ConquestAPIAddDocumentCommand
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
