// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConquestAPIAnyValue Each field corresponds to exactly ValueType
// For example:
//   stringValue and nStringValue (nullable) is for ValueType_String
//
// swagger:model conquest_apiAnyValue
type ConquestAPIAnyValue struct {

	// boolean value
	BooleanValue bool `json:"booleanValue,omitempty"`

	// code value
	CodeValue int32 `json:"codeValue,omitempty"`

	// date time value
	// Format: date-time
	DateTimeValue strfmt.DateTime `json:"dateTimeValue,omitempty"`

	// date value
	// Format: date-time
	DateValue strfmt.DateTime `json:"dateValue,omitempty"`

	// decimal value
	DecimalValue ConquestAPIDecimal `json:"decimalValue,omitempty"`

	// enumeration value
	EnumerationValue int32 `json:"enumerationValue,omitempty"`

	// geography data value
	GeographyDataValue *ConquestAPIGeographyData `json:"geographyDataValue,omitempty"`

	// geometry data value
	GeometryDataValue *ConquestAPIGeometryData `json:"geometryDataValue,omitempty"`

	// hierarchy value
	HierarchyValue *ConquestAPIObjectKey `json:"hierarchyValue,omitempty"`

	// int32 value
	Int32Value int32 `json:"int32Value,omitempty"`

	// int64 value
	Int64Value string `json:"int64Value,omitempty"`

	// n boolean value
	NBooleanValue bool `json:"nBooleanValue,omitempty"`

	// n code value
	NCodeValue int32 `json:"nCodeValue,omitempty"`

	// n date time value
	NDateTimeValue *ConquestAPITimestampValue `json:"nDateTimeValue,omitempty"`

	// n date value
	NDateValue *ConquestAPITimestampValue `json:"nDateValue,omitempty"`

	// n decimal value
	NDecimalValue *ConquestAPIDecimalValue `json:"nDecimalValue,omitempty"`

	// n enumeration value
	NEnumerationValue int32 `json:"nEnumerationValue,omitempty"`

	// n geography data value
	NGeographyDataValue *ConquestAPIGeographyDataValue `json:"nGeographyDataValue,omitempty"`

	// n geometry data value
	NGeometryDataValue *ConquestAPIGeometryDataValue `json:"nGeometryDataValue,omitempty"`

	// n hierarchy value
	NHierarchyValue *ConquestAPIObjectKeyValue `json:"nHierarchyValue,omitempty"`

	// n int32 value
	NInt32Value int32 `json:"nInt32Value,omitempty"`

	// n int64 value
	NInt64Value string `json:"nInt64Value,omitempty"`

	// n number value
	NNumberValue float64 `json:"nNumberValue,omitempty"`

	// n object key value
	NObjectKeyValue *ConquestAPIObjectKeyValue `json:"nObjectKeyValue,omitempty"`

	// n string value
	NStringValue string `json:"nStringValue,omitempty"`

	// number value
	NumberValue float64 `json:"numberValue,omitempty"`

	// object key value
	ObjectKeyValue *ConquestAPIObjectKey `json:"objectKeyValue,omitempty"`

	// string list value
	StringListValue *ConquestAPIStringListValue `json:"stringListValue,omitempty"`

	// string value
	StringValue string `json:"stringValue,omitempty"`

	// style value
	StyleValue *ConquestAPIStyle `json:"styleValue,omitempty"`

	// unknown value
	UnknownValue bool `json:"unknownValue,omitempty"`
}

// Validate validates this conquest api any value
func (m *ConquestAPIAnyValue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateTimeValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDecimalValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeographyDataValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeometryDataValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHierarchyValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNDateTimeValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNDateValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNDecimalValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNGeographyDataValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNGeometryDataValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNHierarchyValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNObjectKeyValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectKeyValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStringListValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStyleValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIAnyValue) validateDateTimeValue(formats strfmt.Registry) error {
	if swag.IsZero(m.DateTimeValue) { // not required
		return nil
	}

	if err := validate.FormatOf("dateTimeValue", "body", "date-time", m.DateTimeValue.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConquestAPIAnyValue) validateDateValue(formats strfmt.Registry) error {
	if swag.IsZero(m.DateValue) { // not required
		return nil
	}

	if err := validate.FormatOf("dateValue", "body", "date-time", m.DateValue.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConquestAPIAnyValue) validateDecimalValue(formats strfmt.Registry) error {
	if swag.IsZero(m.DecimalValue) { // not required
		return nil
	}

	if err := m.DecimalValue.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("decimalValue")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("decimalValue")
		}
		return err
	}

	return nil
}

func (m *ConquestAPIAnyValue) validateGeographyDataValue(formats strfmt.Registry) error {
	if swag.IsZero(m.GeographyDataValue) { // not required
		return nil
	}

	if m.GeographyDataValue != nil {
		if err := m.GeographyDataValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("geographyDataValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("geographyDataValue")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIAnyValue) validateGeometryDataValue(formats strfmt.Registry) error {
	if swag.IsZero(m.GeometryDataValue) { // not required
		return nil
	}

	if m.GeometryDataValue != nil {
		if err := m.GeometryDataValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("geometryDataValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("geometryDataValue")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIAnyValue) validateHierarchyValue(formats strfmt.Registry) error {
	if swag.IsZero(m.HierarchyValue) { // not required
		return nil
	}

	if m.HierarchyValue != nil {
		if err := m.HierarchyValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hierarchyValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hierarchyValue")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIAnyValue) validateNDateTimeValue(formats strfmt.Registry) error {
	if swag.IsZero(m.NDateTimeValue) { // not required
		return nil
	}

	if m.NDateTimeValue != nil {
		if err := m.NDateTimeValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nDateTimeValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nDateTimeValue")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIAnyValue) validateNDateValue(formats strfmt.Registry) error {
	if swag.IsZero(m.NDateValue) { // not required
		return nil
	}

	if m.NDateValue != nil {
		if err := m.NDateValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nDateValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nDateValue")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIAnyValue) validateNDecimalValue(formats strfmt.Registry) error {
	if swag.IsZero(m.NDecimalValue) { // not required
		return nil
	}

	if m.NDecimalValue != nil {
		if err := m.NDecimalValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nDecimalValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nDecimalValue")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIAnyValue) validateNGeographyDataValue(formats strfmt.Registry) error {
	if swag.IsZero(m.NGeographyDataValue) { // not required
		return nil
	}

	if m.NGeographyDataValue != nil {
		if err := m.NGeographyDataValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nGeographyDataValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nGeographyDataValue")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIAnyValue) validateNGeometryDataValue(formats strfmt.Registry) error {
	if swag.IsZero(m.NGeometryDataValue) { // not required
		return nil
	}

	if m.NGeometryDataValue != nil {
		if err := m.NGeometryDataValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nGeometryDataValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nGeometryDataValue")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIAnyValue) validateNHierarchyValue(formats strfmt.Registry) error {
	if swag.IsZero(m.NHierarchyValue) { // not required
		return nil
	}

	if m.NHierarchyValue != nil {
		if err := m.NHierarchyValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nHierarchyValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nHierarchyValue")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIAnyValue) validateNObjectKeyValue(formats strfmt.Registry) error {
	if swag.IsZero(m.NObjectKeyValue) { // not required
		return nil
	}

	if m.NObjectKeyValue != nil {
		if err := m.NObjectKeyValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nObjectKeyValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nObjectKeyValue")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIAnyValue) validateObjectKeyValue(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectKeyValue) { // not required
		return nil
	}

	if m.ObjectKeyValue != nil {
		if err := m.ObjectKeyValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectKeyValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectKeyValue")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIAnyValue) validateStringListValue(formats strfmt.Registry) error {
	if swag.IsZero(m.StringListValue) { // not required
		return nil
	}

	if m.StringListValue != nil {
		if err := m.StringListValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stringListValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stringListValue")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIAnyValue) validateStyleValue(formats strfmt.Registry) error {
	if swag.IsZero(m.StyleValue) { // not required
		return nil
	}

	if m.StyleValue != nil {
		if err := m.StyleValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("styleValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("styleValue")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this conquest api any value based on the context it is used
func (m *ConquestAPIAnyValue) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDecimalValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGeographyDataValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGeometryDataValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHierarchyValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNDateTimeValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNDateValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNDecimalValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNGeographyDataValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNGeometryDataValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNHierarchyValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNObjectKeyValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectKeyValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStringListValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStyleValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIAnyValue) contextValidateDecimalValue(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DecimalValue.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("decimalValue")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("decimalValue")
		}
		return err
	}

	return nil
}

func (m *ConquestAPIAnyValue) contextValidateGeographyDataValue(ctx context.Context, formats strfmt.Registry) error {

	if m.GeographyDataValue != nil {
		if err := m.GeographyDataValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("geographyDataValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("geographyDataValue")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIAnyValue) contextValidateGeometryDataValue(ctx context.Context, formats strfmt.Registry) error {

	if m.GeometryDataValue != nil {
		if err := m.GeometryDataValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("geometryDataValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("geometryDataValue")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIAnyValue) contextValidateHierarchyValue(ctx context.Context, formats strfmt.Registry) error {

	if m.HierarchyValue != nil {
		if err := m.HierarchyValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hierarchyValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hierarchyValue")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIAnyValue) contextValidateNDateTimeValue(ctx context.Context, formats strfmt.Registry) error {

	if m.NDateTimeValue != nil {
		if err := m.NDateTimeValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nDateTimeValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nDateTimeValue")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIAnyValue) contextValidateNDateValue(ctx context.Context, formats strfmt.Registry) error {

	if m.NDateValue != nil {
		if err := m.NDateValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nDateValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nDateValue")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIAnyValue) contextValidateNDecimalValue(ctx context.Context, formats strfmt.Registry) error {

	if m.NDecimalValue != nil {
		if err := m.NDecimalValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nDecimalValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nDecimalValue")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIAnyValue) contextValidateNGeographyDataValue(ctx context.Context, formats strfmt.Registry) error {

	if m.NGeographyDataValue != nil {
		if err := m.NGeographyDataValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nGeographyDataValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nGeographyDataValue")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIAnyValue) contextValidateNGeometryDataValue(ctx context.Context, formats strfmt.Registry) error {

	if m.NGeometryDataValue != nil {
		if err := m.NGeometryDataValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nGeometryDataValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nGeometryDataValue")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIAnyValue) contextValidateNHierarchyValue(ctx context.Context, formats strfmt.Registry) error {

	if m.NHierarchyValue != nil {
		if err := m.NHierarchyValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nHierarchyValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nHierarchyValue")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIAnyValue) contextValidateNObjectKeyValue(ctx context.Context, formats strfmt.Registry) error {

	if m.NObjectKeyValue != nil {
		if err := m.NObjectKeyValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nObjectKeyValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nObjectKeyValue")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIAnyValue) contextValidateObjectKeyValue(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectKeyValue != nil {
		if err := m.ObjectKeyValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectKeyValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectKeyValue")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIAnyValue) contextValidateStringListValue(ctx context.Context, formats strfmt.Registry) error {

	if m.StringListValue != nil {
		if err := m.StringListValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stringListValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stringListValue")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIAnyValue) contextValidateStyleValue(ctx context.Context, formats strfmt.Registry) error {

	if m.StyleValue != nil {
		if err := m.StyleValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("styleValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("styleValue")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConquestAPIAnyValue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConquestAPIAnyValue) UnmarshalBinary(b []byte) error {
	var res ConquestAPIAnyValue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
