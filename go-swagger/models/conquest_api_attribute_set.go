// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConquestAPIAttributeSet conquest api attribute set
//
// swagger:model conquest_apiAttributeSet
type ConquestAPIAttributeSet struct {

	// attribute description
	AttributeDescription string `json:"AttributeDescription,omitempty"`

	// attribute ID
	AttributeID int32 `json:"AttributeID,omitempty"`

	// attribute notes
	AttributeNotes string `json:"AttributeNotes,omitempty"`

	// ObjectType is one of the following: AssetType, ActionCategory, StandardAction, StandardDefect, StandardInspection
	AttributeType *ConquestAPIObjectType `json:"AttributeType,omitempty"`

	// condition type
	ConditionType *ConquestAPIConditionType `json:"ConditionType,omitempty"`

	// excluded groups
	ExcludedGroups []string `json:"ExcludedGroups"`

	// fields
	Fields []*ConquestAPIAttributeSetField `json:"Fields"`
}

// Validate validates this conquest api attribute set
func (m *ConquestAPIAttributeSet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConditionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFields(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIAttributeSet) validateAttributeType(formats strfmt.Registry) error {
	if swag.IsZero(m.AttributeType) { // not required
		return nil
	}

	if m.AttributeType != nil {
		if err := m.AttributeType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AttributeType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AttributeType")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIAttributeSet) validateConditionType(formats strfmt.Registry) error {
	if swag.IsZero(m.ConditionType) { // not required
		return nil
	}

	if m.ConditionType != nil {
		if err := m.ConditionType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ConditionType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ConditionType")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIAttributeSet) validateFields(formats strfmt.Registry) error {
	if swag.IsZero(m.Fields) { // not required
		return nil
	}

	for i := 0; i < len(m.Fields); i++ {
		if swag.IsZero(m.Fields[i]) { // not required
			continue
		}

		if m.Fields[i] != nil {
			if err := m.Fields[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this conquest api attribute set based on the context it is used
func (m *ConquestAPIAttributeSet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConditionType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIAttributeSet) contextValidateAttributeType(ctx context.Context, formats strfmt.Registry) error {

	if m.AttributeType != nil {
		if err := m.AttributeType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AttributeType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AttributeType")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIAttributeSet) contextValidateConditionType(ctx context.Context, formats strfmt.Registry) error {

	if m.ConditionType != nil {
		if err := m.ConditionType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ConditionType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ConditionType")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIAttributeSet) contextValidateFields(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Fields); i++ {

		if m.Fields[i] != nil {
			if err := m.Fields[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Fields" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Fields" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConquestAPIAttributeSet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConquestAPIAttributeSet) UnmarshalBinary(b []byte) error {
	var res ConquestAPIAttributeSet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
