// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConquestAPICalculateDefectResponseDateResult conquest api calculate defect response date result
//
// swagger:model conquest_apiCalculateDefectResponseDateResult
type ConquestAPICalculateDefectResponseDateResult struct {

	// parameters
	Parameters *ConquestAPICalculateDefectResponseDateParameters `json:"Parameters,omitempty"`

	// The Response Date calculated from the Current Inspection Date, Asset's Priority and Severity.
	ResponseDate *ConquestAPITimestampValue `json:"ResponseDate,omitempty"`
}

// Validate validates this conquest api calculate defect response date result
func (m *ConquestAPICalculateDefectResponseDateResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPICalculateDefectResponseDateResult) validateParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	if m.Parameters != nil {
		if err := m.Parameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Parameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Parameters")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPICalculateDefectResponseDateResult) validateResponseDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ResponseDate) { // not required
		return nil
	}

	if m.ResponseDate != nil {
		if err := m.ResponseDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ResponseDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ResponseDate")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this conquest api calculate defect response date result based on the context it is used
func (m *ConquestAPICalculateDefectResponseDateResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResponseDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPICalculateDefectResponseDateResult) contextValidateParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.Parameters != nil {
		if err := m.Parameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Parameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Parameters")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPICalculateDefectResponseDateResult) contextValidateResponseDate(ctx context.Context, formats strfmt.Registry) error {

	if m.ResponseDate != nil {
		if err := m.ResponseDate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ResponseDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ResponseDate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConquestAPICalculateDefectResponseDateResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConquestAPICalculateDefectResponseDateResult) UnmarshalBinary(b []byte) error {
	var res ConquestAPICalculateDefectResponseDateResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
