// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConquestAPICsvImportStateResponse conquest api csv import state response
//
// swagger:model conquest_apiCsvImportStateResponse
type ConquestAPICsvImportStateResponse struct {

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"Created,omitempty"`

	// created by
	CreatedBy string `json:"CreatedBy,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// error
	Error string `json:"Error,omitempty"`

	// last updated
	// Format: date-time
	LastUpdated strfmt.DateTime `json:"LastUpdated,omitempty"`

	// job_id
	ProcessID string `json:"ProcessID,omitempty"`

	// status
	Status *ConquestAPIJobStatus `json:"Status,omitempty"`

	// status description
	StatusDescription string `json:"StatusDescription,omitempty"`

	// task progress
	TaskProgress float64 `json:"TaskProgress,omitempty"`

	// title
	Title string `json:"Title,omitempty"`

	// total work
	TotalWork float64 `json:"TotalWork,omitempty"`

	// work done
	WorkDone float64 `json:"WorkDone,omitempty"`

	// aka. ProcessID/BatchID with JobType_CsvImport
	JobKey *ConquestAPIJobKey `json:"job_key,omitempty"`
}

// Validate validates this conquest api csv import state response
func (m *ConquestAPICsvImportStateResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPICsvImportStateResponse) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(m.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("Created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConquestAPICsvImportStateResponse) validateLastUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("LastUpdated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConquestAPICsvImportStateResponse) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Status")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPICsvImportStateResponse) validateJobKey(formats strfmt.Registry) error {
	if swag.IsZero(m.JobKey) { // not required
		return nil
	}

	if m.JobKey != nil {
		if err := m.JobKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("job_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("job_key")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this conquest api csv import state response based on the context it is used
func (m *ConquestAPICsvImportStateResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJobKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPICsvImportStateResponse) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Status")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPICsvImportStateResponse) contextValidateJobKey(ctx context.Context, formats strfmt.Registry) error {

	if m.JobKey != nil {
		if err := m.JobKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("job_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("job_key")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConquestAPICsvImportStateResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConquestAPICsvImportStateResponse) UnmarshalBinary(b []byte) error {
	var res ConquestAPICsvImportStateResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
