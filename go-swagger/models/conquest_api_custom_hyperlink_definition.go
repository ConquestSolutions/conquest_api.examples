// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConquestAPICustomHyperlinkDefinition conquest api custom hyperlink definition
//
// swagger:model conquest_apiCustomHyperlinkDefinition
type ConquestAPICustomHyperlinkDefinition struct {

	// custom hyperlink ID
	CustomHyperlinkID string `json:"CustomHyperlinkID,omitempty"`

	// is available expression
	IsAvailableExpression string `json:"IsAvailableExpression,omitempty"`

	// is enabled expression
	IsEnabledExpression string `json:"IsEnabledExpression,omitempty"`

	// link expression
	LinkExpression string `json:"LinkExpression,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// object type
	ObjectType *ConquestAPIObjectType `json:"ObjectType,omitempty"`

	// title expression
	TitleExpression string `json:"TitleExpression,omitempty"`
}

// Validate validates this conquest api custom hyperlink definition
func (m *ConquestAPICustomHyperlinkDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjectType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPICustomHyperlinkDefinition) validateObjectType(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectType) { // not required
		return nil
	}

	if m.ObjectType != nil {
		if err := m.ObjectType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ObjectType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ObjectType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this conquest api custom hyperlink definition based on the context it is used
func (m *ConquestAPICustomHyperlinkDefinition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateObjectType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPICustomHyperlinkDefinition) contextValidateObjectType(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectType != nil {
		if err := m.ObjectType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ObjectType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ObjectType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConquestAPICustomHyperlinkDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConquestAPICustomHyperlinkDefinition) UnmarshalBinary(b []byte) error {
	var res ConquestAPICustomHyperlinkDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
