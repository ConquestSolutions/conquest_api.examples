// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConquestAPIDefectRecord DefectRecord is a selection of fields that may be modified directly.
//
// swagger:model conquest_apiDefectRecord
type ConquestAPIDefectRecord struct {

	// category ID
	CategoryID int32 `json:"CategoryID,omitempty"`

	// condition
	Condition int32 `json:"Condition,omitempty"`

	// google.protobuf.Int32Value ElementList = 44; // Legacy no-one uses it Peter says.
	//    google.protobuf.Int32Value Element = 45; // Legacy no-one uses it Peter says.
	CostEstimate *ConquestAPIDecimalValue `json:"CostEstimate,omitempty"`

	// defect description
	DefectDescription string `json:"DefectDescription,omitempty"`

	// defect notes
	DefectNotes string `json:"DefectNotes,omitempty"`

	// geometry data
	GeometryData *ConquestAPIGeometryDataValue `json:"GeometryData,omitempty"`

	// inspection
	Inspection *ConquestAPIInspectionRecord `json:"Inspection,omitempty"`

	// LocationCoordinates is a pin/point that defaults to the centroid on the Defect's geography object
	LocationCoordinates *ConquestAPIGeographyDataValue `json:"LocationCoordinates,omitempty"`

	// material quantity
	MaterialQuantity float64 `json:"MaterialQuantity,omitempty"`

	// monitor
	Monitor bool `json:"Monitor,omitempty"`

	// priority
	Priority int32 `json:"Priority,omitempty"`

	// SeverityID as determined by the Asset's Priority
	SeverityID int32 `json:"SeverityID,omitempty"`

	// std defect ID
	StdDefectID int32 `json:"StdDefectID,omitempty"`

	// user check1
	UserCheck1 bool `json:"UserCheck1,omitempty"`

	// user check10
	UserCheck10 bool `json:"UserCheck10,omitempty"`

	// user check11
	UserCheck11 bool `json:"UserCheck11,omitempty"`

	// user check12
	UserCheck12 bool `json:"UserCheck12,omitempty"`

	// user check13
	UserCheck13 bool `json:"UserCheck13,omitempty"`

	// user check14
	UserCheck14 bool `json:"UserCheck14,omitempty"`

	// user check15
	UserCheck15 bool `json:"UserCheck15,omitempty"`

	// user check16
	UserCheck16 bool `json:"UserCheck16,omitempty"`

	// user check17
	UserCheck17 bool `json:"UserCheck17,omitempty"`

	// user check18
	UserCheck18 bool `json:"UserCheck18,omitempty"`

	// user check19
	UserCheck19 bool `json:"UserCheck19,omitempty"`

	// user check2
	UserCheck2 bool `json:"UserCheck2,omitempty"`

	// user check20
	UserCheck20 bool `json:"UserCheck20,omitempty"`

	// user check21
	UserCheck21 bool `json:"UserCheck21,omitempty"`

	// user check22
	UserCheck22 bool `json:"UserCheck22,omitempty"`

	// user check23
	UserCheck23 bool `json:"UserCheck23,omitempty"`

	// user check24
	UserCheck24 bool `json:"UserCheck24,omitempty"`

	// user check25
	UserCheck25 bool `json:"UserCheck25,omitempty"`

	// user check26
	UserCheck26 bool `json:"UserCheck26,omitempty"`

	// user check27
	UserCheck27 bool `json:"UserCheck27,omitempty"`

	// user check28
	UserCheck28 bool `json:"UserCheck28,omitempty"`

	// user check29
	UserCheck29 bool `json:"UserCheck29,omitempty"`

	// user check3
	UserCheck3 bool `json:"UserCheck3,omitempty"`

	// user check30
	UserCheck30 bool `json:"UserCheck30,omitempty"`

	// user check4
	UserCheck4 bool `json:"UserCheck4,omitempty"`

	// user check5
	UserCheck5 bool `json:"UserCheck5,omitempty"`

	// user check6
	UserCheck6 bool `json:"UserCheck6,omitempty"`

	// user check7
	UserCheck7 bool `json:"UserCheck7,omitempty"`

	// user check8
	UserCheck8 bool `json:"UserCheck8,omitempty"`

	// user check9
	UserCheck9 bool `json:"UserCheck9,omitempty"`

	// user date1
	UserDate1 *ConquestAPITimestampValue `json:"UserDate1,omitempty"`

	// user date10
	UserDate10 *ConquestAPITimestampValue `json:"UserDate10,omitempty"`

	// user date11
	UserDate11 *ConquestAPITimestampValue `json:"UserDate11,omitempty"`

	// user date12
	UserDate12 *ConquestAPITimestampValue `json:"UserDate12,omitempty"`

	// user date13
	UserDate13 *ConquestAPITimestampValue `json:"UserDate13,omitempty"`

	// user date14
	UserDate14 *ConquestAPITimestampValue `json:"UserDate14,omitempty"`

	// user date15
	UserDate15 *ConquestAPITimestampValue `json:"UserDate15,omitempty"`

	// user date16
	UserDate16 *ConquestAPITimestampValue `json:"UserDate16,omitempty"`

	// user date17
	UserDate17 *ConquestAPITimestampValue `json:"UserDate17,omitempty"`

	// user date18
	UserDate18 *ConquestAPITimestampValue `json:"UserDate18,omitempty"`

	// user date19
	UserDate19 *ConquestAPITimestampValue `json:"UserDate19,omitempty"`

	// user date2
	UserDate2 *ConquestAPITimestampValue `json:"UserDate2,omitempty"`

	// user date20
	UserDate20 *ConquestAPITimestampValue `json:"UserDate20,omitempty"`

	// user date21
	UserDate21 *ConquestAPITimestampValue `json:"UserDate21,omitempty"`

	// user date22
	UserDate22 *ConquestAPITimestampValue `json:"UserDate22,omitempty"`

	// user date23
	UserDate23 *ConquestAPITimestampValue `json:"UserDate23,omitempty"`

	// user date24
	UserDate24 *ConquestAPITimestampValue `json:"UserDate24,omitempty"`

	// user date25
	UserDate25 *ConquestAPITimestampValue `json:"UserDate25,omitempty"`

	// user date26
	UserDate26 *ConquestAPITimestampValue `json:"UserDate26,omitempty"`

	// user date27
	UserDate27 *ConquestAPITimestampValue `json:"UserDate27,omitempty"`

	// user date28
	UserDate28 *ConquestAPITimestampValue `json:"UserDate28,omitempty"`

	// user date29
	UserDate29 *ConquestAPITimestampValue `json:"UserDate29,omitempty"`

	// user date3
	UserDate3 *ConquestAPITimestampValue `json:"UserDate3,omitempty"`

	// user date30
	UserDate30 *ConquestAPITimestampValue `json:"UserDate30,omitempty"`

	// user date4
	UserDate4 *ConquestAPITimestampValue `json:"UserDate4,omitempty"`

	// user date5
	UserDate5 *ConquestAPITimestampValue `json:"UserDate5,omitempty"`

	// user date6
	UserDate6 *ConquestAPITimestampValue `json:"UserDate6,omitempty"`

	// user date7
	UserDate7 *ConquestAPITimestampValue `json:"UserDate7,omitempty"`

	// user date8
	UserDate8 *ConquestAPITimestampValue `json:"UserDate8,omitempty"`

	// user date9
	UserDate9 *ConquestAPITimestampValue `json:"UserDate9,omitempty"`

	// user list1
	UserList1 int32 `json:"UserList1,omitempty"`

	// user list10
	UserList10 int32 `json:"UserList10,omitempty"`

	// user list11
	UserList11 int32 `json:"UserList11,omitempty"`

	// user list12
	UserList12 int32 `json:"UserList12,omitempty"`

	// user list13
	UserList13 int32 `json:"UserList13,omitempty"`

	// user list14
	UserList14 int32 `json:"UserList14,omitempty"`

	// user list15
	UserList15 int32 `json:"UserList15,omitempty"`

	// user list16
	UserList16 int32 `json:"UserList16,omitempty"`

	// user list17
	UserList17 int32 `json:"UserList17,omitempty"`

	// user list18
	UserList18 int32 `json:"UserList18,omitempty"`

	// user list19
	UserList19 int32 `json:"UserList19,omitempty"`

	// user list2
	UserList2 int32 `json:"UserList2,omitempty"`

	// user list20
	UserList20 int32 `json:"UserList20,omitempty"`

	// user list21
	UserList21 int32 `json:"UserList21,omitempty"`

	// user list22
	UserList22 int32 `json:"UserList22,omitempty"`

	// user list23
	UserList23 int32 `json:"UserList23,omitempty"`

	// user list24
	UserList24 int32 `json:"UserList24,omitempty"`

	// user list25
	UserList25 int32 `json:"UserList25,omitempty"`

	// user list26
	UserList26 int32 `json:"UserList26,omitempty"`

	// user list27
	UserList27 int32 `json:"UserList27,omitempty"`

	// user list28
	UserList28 int32 `json:"UserList28,omitempty"`

	// user list29
	UserList29 int32 `json:"UserList29,omitempty"`

	// user list3
	UserList3 int32 `json:"UserList3,omitempty"`

	// user list30
	UserList30 int32 `json:"UserList30,omitempty"`

	// user list4
	UserList4 int32 `json:"UserList4,omitempty"`

	// user list5
	UserList5 int32 `json:"UserList5,omitempty"`

	// user list6
	UserList6 int32 `json:"UserList6,omitempty"`

	// user list7
	UserList7 int32 `json:"UserList7,omitempty"`

	// user list8
	UserList8 int32 `json:"UserList8,omitempty"`

	// user list9
	UserList9 int32 `json:"UserList9,omitempty"`

	// user number1
	UserNumber1 float64 `json:"UserNumber1,omitempty"`

	// user number10
	UserNumber10 float64 `json:"UserNumber10,omitempty"`

	// user number11
	UserNumber11 float64 `json:"UserNumber11,omitempty"`

	// user number12
	UserNumber12 float64 `json:"UserNumber12,omitempty"`

	// user number13
	UserNumber13 float64 `json:"UserNumber13,omitempty"`

	// user number14
	UserNumber14 float64 `json:"UserNumber14,omitempty"`

	// user number15
	UserNumber15 float64 `json:"UserNumber15,omitempty"`

	// user number16
	UserNumber16 float64 `json:"UserNumber16,omitempty"`

	// user number17
	UserNumber17 float64 `json:"UserNumber17,omitempty"`

	// user number18
	UserNumber18 float64 `json:"UserNumber18,omitempty"`

	// user number19
	UserNumber19 float64 `json:"UserNumber19,omitempty"`

	// user number2
	UserNumber2 float64 `json:"UserNumber2,omitempty"`

	// user number20
	UserNumber20 float64 `json:"UserNumber20,omitempty"`

	// user number21
	UserNumber21 float64 `json:"UserNumber21,omitempty"`

	// user number22
	UserNumber22 float64 `json:"UserNumber22,omitempty"`

	// user number23
	UserNumber23 float64 `json:"UserNumber23,omitempty"`

	// user number24
	UserNumber24 float64 `json:"UserNumber24,omitempty"`

	// user number25
	UserNumber25 float64 `json:"UserNumber25,omitempty"`

	// user number26
	UserNumber26 float64 `json:"UserNumber26,omitempty"`

	// user number27
	UserNumber27 float64 `json:"UserNumber27,omitempty"`

	// user number28
	UserNumber28 float64 `json:"UserNumber28,omitempty"`

	// user number29
	UserNumber29 float64 `json:"UserNumber29,omitempty"`

	// user number3
	UserNumber3 float64 `json:"UserNumber3,omitempty"`

	// user number30
	UserNumber30 float64 `json:"UserNumber30,omitempty"`

	// user number4
	UserNumber4 float64 `json:"UserNumber4,omitempty"`

	// user number5
	UserNumber5 float64 `json:"UserNumber5,omitempty"`

	// user number6
	UserNumber6 float64 `json:"UserNumber6,omitempty"`

	// user number7
	UserNumber7 float64 `json:"UserNumber7,omitempty"`

	// user number8
	UserNumber8 float64 `json:"UserNumber8,omitempty"`

	// user number9
	UserNumber9 float64 `json:"UserNumber9,omitempty"`

	// user text1
	UserText1 string `json:"UserText1,omitempty"`

	// user text10
	UserText10 string `json:"UserText10,omitempty"`

	// user text11
	UserText11 string `json:"UserText11,omitempty"`

	// user text12
	UserText12 string `json:"UserText12,omitempty"`

	// user text13
	UserText13 string `json:"UserText13,omitempty"`

	// user text14
	UserText14 string `json:"UserText14,omitempty"`

	// user text15
	UserText15 string `json:"UserText15,omitempty"`

	// user text16
	UserText16 string `json:"UserText16,omitempty"`

	// user text17
	UserText17 string `json:"UserText17,omitempty"`

	// user text18
	UserText18 string `json:"UserText18,omitempty"`

	// user text19
	UserText19 string `json:"UserText19,omitempty"`

	// user text2
	UserText2 string `json:"UserText2,omitempty"`

	// user text20
	UserText20 string `json:"UserText20,omitempty"`

	// user text21
	UserText21 string `json:"UserText21,omitempty"`

	// user text22
	UserText22 string `json:"UserText22,omitempty"`

	// user text23
	UserText23 string `json:"UserText23,omitempty"`

	// user text24
	UserText24 string `json:"UserText24,omitempty"`

	// user text25
	UserText25 string `json:"UserText25,omitempty"`

	// user text26
	UserText26 string `json:"UserText26,omitempty"`

	// user text27
	UserText27 string `json:"UserText27,omitempty"`

	// user text28
	UserText28 string `json:"UserText28,omitempty"`

	// user text29
	UserText29 string `json:"UserText29,omitempty"`

	// user text3
	UserText3 string `json:"UserText3,omitempty"`

	// user text30
	UserText30 string `json:"UserText30,omitempty"`

	// user text4
	UserText4 string `json:"UserText4,omitempty"`

	// user text5
	UserText5 string `json:"UserText5,omitempty"`

	// user text6
	UserText6 string `json:"UserText6,omitempty"`

	// user text7
	UserText7 string `json:"UserText7,omitempty"`

	// user text8
	UserText8 string `json:"UserText8,omitempty"`

	// user text9
	UserText9 string `json:"UserText9,omitempty"`

	// work required
	WorkRequired bool `json:"WorkRequired,omitempty"`
}

// Validate validates this conquest api defect record
func (m *ConquestAPIDefectRecord) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCostEstimate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeometryData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInspection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocationCoordinates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate10(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate11(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate12(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate13(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate14(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate15(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate16(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate17(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate18(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate19(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate20(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate21(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate22(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate23(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate24(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate25(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate26(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate27(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate28(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate29(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate30(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate5(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate6(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate7(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate8(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserDate9(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIDefectRecord) validateCostEstimate(formats strfmt.Registry) error {
	if swag.IsZero(m.CostEstimate) { // not required
		return nil
	}

	if m.CostEstimate != nil {
		if err := m.CostEstimate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CostEstimate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CostEstimate")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateGeometryData(formats strfmt.Registry) error {
	if swag.IsZero(m.GeometryData) { // not required
		return nil
	}

	if m.GeometryData != nil {
		if err := m.GeometryData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("GeometryData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("GeometryData")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateInspection(formats strfmt.Registry) error {
	if swag.IsZero(m.Inspection) { // not required
		return nil
	}

	if m.Inspection != nil {
		if err := m.Inspection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Inspection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Inspection")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateLocationCoordinates(formats strfmt.Registry) error {
	if swag.IsZero(m.LocationCoordinates) { // not required
		return nil
	}

	if m.LocationCoordinates != nil {
		if err := m.LocationCoordinates.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LocationCoordinates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LocationCoordinates")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateUserDate1(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDate1) { // not required
		return nil
	}

	if m.UserDate1 != nil {
		if err := m.UserDate1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate1")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateUserDate10(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDate10) { // not required
		return nil
	}

	if m.UserDate10 != nil {
		if err := m.UserDate10.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate10")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate10")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateUserDate11(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDate11) { // not required
		return nil
	}

	if m.UserDate11 != nil {
		if err := m.UserDate11.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate11")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate11")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateUserDate12(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDate12) { // not required
		return nil
	}

	if m.UserDate12 != nil {
		if err := m.UserDate12.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate12")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate12")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateUserDate13(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDate13) { // not required
		return nil
	}

	if m.UserDate13 != nil {
		if err := m.UserDate13.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate13")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate13")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateUserDate14(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDate14) { // not required
		return nil
	}

	if m.UserDate14 != nil {
		if err := m.UserDate14.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate14")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate14")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateUserDate15(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDate15) { // not required
		return nil
	}

	if m.UserDate15 != nil {
		if err := m.UserDate15.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate15")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate15")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateUserDate16(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDate16) { // not required
		return nil
	}

	if m.UserDate16 != nil {
		if err := m.UserDate16.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate16")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate16")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateUserDate17(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDate17) { // not required
		return nil
	}

	if m.UserDate17 != nil {
		if err := m.UserDate17.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate17")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate17")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateUserDate18(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDate18) { // not required
		return nil
	}

	if m.UserDate18 != nil {
		if err := m.UserDate18.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate18")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate18")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateUserDate19(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDate19) { // not required
		return nil
	}

	if m.UserDate19 != nil {
		if err := m.UserDate19.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate19")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate19")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateUserDate2(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDate2) { // not required
		return nil
	}

	if m.UserDate2 != nil {
		if err := m.UserDate2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate2")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateUserDate20(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDate20) { // not required
		return nil
	}

	if m.UserDate20 != nil {
		if err := m.UserDate20.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate20")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate20")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateUserDate21(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDate21) { // not required
		return nil
	}

	if m.UserDate21 != nil {
		if err := m.UserDate21.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate21")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate21")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateUserDate22(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDate22) { // not required
		return nil
	}

	if m.UserDate22 != nil {
		if err := m.UserDate22.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate22")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate22")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateUserDate23(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDate23) { // not required
		return nil
	}

	if m.UserDate23 != nil {
		if err := m.UserDate23.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate23")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate23")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateUserDate24(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDate24) { // not required
		return nil
	}

	if m.UserDate24 != nil {
		if err := m.UserDate24.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate24")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate24")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateUserDate25(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDate25) { // not required
		return nil
	}

	if m.UserDate25 != nil {
		if err := m.UserDate25.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate25")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate25")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateUserDate26(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDate26) { // not required
		return nil
	}

	if m.UserDate26 != nil {
		if err := m.UserDate26.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate26")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate26")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateUserDate27(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDate27) { // not required
		return nil
	}

	if m.UserDate27 != nil {
		if err := m.UserDate27.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate27")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate27")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateUserDate28(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDate28) { // not required
		return nil
	}

	if m.UserDate28 != nil {
		if err := m.UserDate28.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate28")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate28")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateUserDate29(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDate29) { // not required
		return nil
	}

	if m.UserDate29 != nil {
		if err := m.UserDate29.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate29")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate29")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateUserDate3(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDate3) { // not required
		return nil
	}

	if m.UserDate3 != nil {
		if err := m.UserDate3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate3")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateUserDate30(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDate30) { // not required
		return nil
	}

	if m.UserDate30 != nil {
		if err := m.UserDate30.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate30")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate30")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateUserDate4(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDate4) { // not required
		return nil
	}

	if m.UserDate4 != nil {
		if err := m.UserDate4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate4")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateUserDate5(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDate5) { // not required
		return nil
	}

	if m.UserDate5 != nil {
		if err := m.UserDate5.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate5")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate5")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateUserDate6(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDate6) { // not required
		return nil
	}

	if m.UserDate6 != nil {
		if err := m.UserDate6.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate6")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate6")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateUserDate7(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDate7) { // not required
		return nil
	}

	if m.UserDate7 != nil {
		if err := m.UserDate7.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate7")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate7")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateUserDate8(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDate8) { // not required
		return nil
	}

	if m.UserDate8 != nil {
		if err := m.UserDate8.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate8")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate8")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) validateUserDate9(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDate9) { // not required
		return nil
	}

	if m.UserDate9 != nil {
		if err := m.UserDate9.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate9")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate9")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this conquest api defect record based on the context it is used
func (m *ConquestAPIDefectRecord) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCostEstimate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGeometryData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInspection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocationCoordinates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDate1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDate10(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDate11(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDate12(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDate13(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDate14(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDate15(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDate16(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDate17(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDate18(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDate19(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDate2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDate20(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDate21(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDate22(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDate23(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDate24(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDate25(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDate26(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDate27(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDate28(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDate29(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDate3(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDate30(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDate4(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDate5(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDate6(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDate7(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDate8(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserDate9(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateCostEstimate(ctx context.Context, formats strfmt.Registry) error {

	if m.CostEstimate != nil {
		if err := m.CostEstimate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CostEstimate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CostEstimate")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateGeometryData(ctx context.Context, formats strfmt.Registry) error {

	if m.GeometryData != nil {
		if err := m.GeometryData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("GeometryData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("GeometryData")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateInspection(ctx context.Context, formats strfmt.Registry) error {

	if m.Inspection != nil {
		if err := m.Inspection.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Inspection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Inspection")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateLocationCoordinates(ctx context.Context, formats strfmt.Registry) error {

	if m.LocationCoordinates != nil {
		if err := m.LocationCoordinates.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LocationCoordinates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LocationCoordinates")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateUserDate1(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDate1 != nil {
		if err := m.UserDate1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate1")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateUserDate10(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDate10 != nil {
		if err := m.UserDate10.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate10")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate10")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateUserDate11(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDate11 != nil {
		if err := m.UserDate11.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate11")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate11")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateUserDate12(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDate12 != nil {
		if err := m.UserDate12.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate12")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate12")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateUserDate13(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDate13 != nil {
		if err := m.UserDate13.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate13")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate13")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateUserDate14(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDate14 != nil {
		if err := m.UserDate14.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate14")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate14")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateUserDate15(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDate15 != nil {
		if err := m.UserDate15.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate15")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate15")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateUserDate16(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDate16 != nil {
		if err := m.UserDate16.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate16")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate16")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateUserDate17(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDate17 != nil {
		if err := m.UserDate17.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate17")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate17")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateUserDate18(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDate18 != nil {
		if err := m.UserDate18.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate18")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate18")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateUserDate19(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDate19 != nil {
		if err := m.UserDate19.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate19")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate19")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateUserDate2(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDate2 != nil {
		if err := m.UserDate2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate2")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateUserDate20(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDate20 != nil {
		if err := m.UserDate20.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate20")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate20")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateUserDate21(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDate21 != nil {
		if err := m.UserDate21.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate21")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate21")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateUserDate22(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDate22 != nil {
		if err := m.UserDate22.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate22")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate22")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateUserDate23(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDate23 != nil {
		if err := m.UserDate23.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate23")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate23")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateUserDate24(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDate24 != nil {
		if err := m.UserDate24.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate24")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate24")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateUserDate25(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDate25 != nil {
		if err := m.UserDate25.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate25")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate25")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateUserDate26(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDate26 != nil {
		if err := m.UserDate26.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate26")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate26")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateUserDate27(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDate27 != nil {
		if err := m.UserDate27.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate27")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate27")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateUserDate28(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDate28 != nil {
		if err := m.UserDate28.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate28")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate28")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateUserDate29(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDate29 != nil {
		if err := m.UserDate29.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate29")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate29")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateUserDate3(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDate3 != nil {
		if err := m.UserDate3.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate3")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateUserDate30(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDate30 != nil {
		if err := m.UserDate30.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate30")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate30")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateUserDate4(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDate4 != nil {
		if err := m.UserDate4.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate4")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateUserDate5(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDate5 != nil {
		if err := m.UserDate5.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate5")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate5")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateUserDate6(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDate6 != nil {
		if err := m.UserDate6.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate6")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate6")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateUserDate7(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDate7 != nil {
		if err := m.UserDate7.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate7")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate7")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateUserDate8(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDate8 != nil {
		if err := m.UserDate8.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate8")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate8")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIDefectRecord) contextValidateUserDate9(ctx context.Context, formats strfmt.Registry) error {

	if m.UserDate9 != nil {
		if err := m.UserDate9.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UserDate9")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("UserDate9")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConquestAPIDefectRecord) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConquestAPIDefectRecord) UnmarshalBinary(b []byte) error {
	var res ConquestAPIDefectRecord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
