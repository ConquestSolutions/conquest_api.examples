// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConquestAPIDocumentMigrationWorkLoad conquest api document migration work load
//
// swagger:model conquest_apiDocumentMigrationWorkLoad
type ConquestAPIDocumentMigrationWorkLoad struct {

	// device name
	DeviceName string `json:"DeviceName,omitempty"`

	// notes
	Notes string `json:"Notes,omitempty"`

	// overall progress message
	OverallProgressMessage string `json:"OverallProgressMessage,omitempty"`

	// overall progress value
	OverallProgressValue float64 `json:"OverallProgressValue,omitempty"`

	// progress details
	ProgressDetails []*ConquestAPIDocumentTypeMigrationProgress `json:"ProgressDetails"`

	// user name
	UserName string `json:"UserName,omitempty"`

	// To identify each work load
	WorkLoadID string `json:"WorkLoadID,omitempty"`

	// work started
	// Format: date-time
	WorkStarted strfmt.DateTime `json:"WorkStarted,omitempty"`
}

// Validate validates this conquest api document migration work load
func (m *ConquestAPIDocumentMigrationWorkLoad) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProgressDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkStarted(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIDocumentMigrationWorkLoad) validateProgressDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.ProgressDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.ProgressDetails); i++ {
		if swag.IsZero(m.ProgressDetails[i]) { // not required
			continue
		}

		if m.ProgressDetails[i] != nil {
			if err := m.ProgressDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ProgressDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ProgressDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConquestAPIDocumentMigrationWorkLoad) validateWorkStarted(formats strfmt.Registry) error {
	if swag.IsZero(m.WorkStarted) { // not required
		return nil
	}

	if err := validate.FormatOf("WorkStarted", "body", "date-time", m.WorkStarted.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this conquest api document migration work load based on the context it is used
func (m *ConquestAPIDocumentMigrationWorkLoad) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProgressDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIDocumentMigrationWorkLoad) contextValidateProgressDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProgressDetails); i++ {

		if m.ProgressDetails[i] != nil {
			if err := m.ProgressDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ProgressDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ProgressDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConquestAPIDocumentMigrationWorkLoad) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConquestAPIDocumentMigrationWorkLoad) UnmarshalBinary(b []byte) error {
	var res ConquestAPIDocumentMigrationWorkLoad
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
