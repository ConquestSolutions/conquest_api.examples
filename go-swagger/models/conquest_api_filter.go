// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConquestAPIFilter conquest api filter
//
// swagger:model conquest_apiFilter
type ConquestAPIFilter struct {

	// Context is a selection of fields with a predefined Criteria. It is like the 'from' clause if a SQL query, a set of "joined tables".
	//
	// Contexts are defined in the Field Dictionary
	//
	// This Context is parameterised with the ObjectID for it's respective ObjectType
	Context string `json:"Context,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// The ID for a UserView. A UserView is constructed using the filter builder.
	FilterID int32 `json:"FilterID,omitempty"`

	// filter name
	FilterName string `json:"FilterName,omitempty"`

	// is available to mobile
	IsAvailableToMobile bool `json:"IsAvailableToMobile,omitempty"`

	// The ID for a MapView. A MapView is a collection of UserViews.
	// The ResultSet will have many groups.
	MapViewID int32 `json:"MapViewID,omitempty"`

	// owner
	Owner string `json:"Owner,omitempty"`

	// system
	System bool `json:"System,omitempty"`

	// user views
	UserViews []*ConquestAPIUserViewFilter `json:"UserViews"`
}

// Validate validates this conquest api filter
func (m *ConquestAPIFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUserViews(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIFilter) validateUserViews(formats strfmt.Registry) error {
	if swag.IsZero(m.UserViews) { // not required
		return nil
	}

	for i := 0; i < len(m.UserViews); i++ {
		if swag.IsZero(m.UserViews[i]) { // not required
			continue
		}

		if m.UserViews[i] != nil {
			if err := m.UserViews[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("UserViews" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("UserViews" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this conquest api filter based on the context it is used
func (m *ConquestAPIFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUserViews(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIFilter) contextValidateUserViews(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserViews); i++ {

		if m.UserViews[i] != nil {
			if err := m.UserViews[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("UserViews" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("UserViews" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConquestAPIFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConquestAPIFilter) UnmarshalBinary(b []byte) error {
	var res ConquestAPIFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
