// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConquestAPIGetJobStateQuery conquest api get job state query
//
// swagger:model conquest_apiGetJobStateQuery
type ConquestAPIGetJobStateQuery struct {

	// job keys
	JobKeys []*ConquestAPIJobKey `json:"job_keys"`

	// job types
	JobTypes []*ConquestAPIJobType `json:"job_types"`

	// record keys
	RecordKeys []*ConquestAPIRecordKey `json:"record_keys"`
}

// Validate validates this conquest api get job state query
func (m *ConquestAPIGetJobStateQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJobKeys(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecordKeys(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIGetJobStateQuery) validateJobKeys(formats strfmt.Registry) error {
	if swag.IsZero(m.JobKeys) { // not required
		return nil
	}

	for i := 0; i < len(m.JobKeys); i++ {
		if swag.IsZero(m.JobKeys[i]) { // not required
			continue
		}

		if m.JobKeys[i] != nil {
			if err := m.JobKeys[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("job_keys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("job_keys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConquestAPIGetJobStateQuery) validateJobTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.JobTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.JobTypes); i++ {
		if swag.IsZero(m.JobTypes[i]) { // not required
			continue
		}

		if m.JobTypes[i] != nil {
			if err := m.JobTypes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("job_types" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("job_types" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConquestAPIGetJobStateQuery) validateRecordKeys(formats strfmt.Registry) error {
	if swag.IsZero(m.RecordKeys) { // not required
		return nil
	}

	for i := 0; i < len(m.RecordKeys); i++ {
		if swag.IsZero(m.RecordKeys[i]) { // not required
			continue
		}

		if m.RecordKeys[i] != nil {
			if err := m.RecordKeys[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("record_keys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("record_keys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this conquest api get job state query based on the context it is used
func (m *ConquestAPIGetJobStateQuery) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateJobKeys(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJobTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecordKeys(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIGetJobStateQuery) contextValidateJobKeys(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.JobKeys); i++ {

		if m.JobKeys[i] != nil {
			if err := m.JobKeys[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("job_keys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("job_keys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConquestAPIGetJobStateQuery) contextValidateJobTypes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.JobTypes); i++ {

		if m.JobTypes[i] != nil {
			if err := m.JobTypes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("job_types" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("job_types" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConquestAPIGetJobStateQuery) contextValidateRecordKeys(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RecordKeys); i++ {

		if m.RecordKeys[i] != nil {
			if err := m.RecordKeys[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("record_keys" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("record_keys" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConquestAPIGetJobStateQuery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConquestAPIGetJobStateQuery) UnmarshalBinary(b []byte) error {
	var res ConquestAPIGetJobStateQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
