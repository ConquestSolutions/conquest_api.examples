// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConquestAPIGroupRecord conquest api group record
//
// swagger:model conquest_apiGroupRecord
type ConquestAPIGroupRecord struct {

	// actions permission
	ActionsPermission *ConquestAPIPermission `json:"ActionsPermission,omitempty"`

	// asset valuation permission
	AssetValuationPermission *ConquestAPIPermission `json:"AssetValuationPermission,omitempty"`

	// assets permission
	AssetsPermission *ConquestAPIPermission `json:"AssetsPermission,omitempty"`

	// knowledge base permission
	KnowledgeBasePermission *ConquestAPIPermission `json:"KnowledgeBasePermission,omitempty"`

	// list editor permission
	ListEditorPermission *ConquestAPIPermission `json:"ListEditorPermission,omitempty"`

	// requests permission
	RequestsPermission *ConquestAPIPermission `json:"RequestsPermission,omitempty"`

	// resource editor permission
	ResourceEditorPermission *ConquestAPIPermission `json:"ResourceEditorPermission,omitempty"`
}

// Validate validates this conquest api group record
func (m *ConquestAPIGroupRecord) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionsPermission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetValuationPermission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetsPermission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKnowledgeBasePermission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateListEditorPermission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestsPermission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceEditorPermission(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIGroupRecord) validateActionsPermission(formats strfmt.Registry) error {
	if swag.IsZero(m.ActionsPermission) { // not required
		return nil
	}

	if m.ActionsPermission != nil {
		if err := m.ActionsPermission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ActionsPermission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ActionsPermission")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIGroupRecord) validateAssetValuationPermission(formats strfmt.Registry) error {
	if swag.IsZero(m.AssetValuationPermission) { // not required
		return nil
	}

	if m.AssetValuationPermission != nil {
		if err := m.AssetValuationPermission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AssetValuationPermission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AssetValuationPermission")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIGroupRecord) validateAssetsPermission(formats strfmt.Registry) error {
	if swag.IsZero(m.AssetsPermission) { // not required
		return nil
	}

	if m.AssetsPermission != nil {
		if err := m.AssetsPermission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AssetsPermission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AssetsPermission")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIGroupRecord) validateKnowledgeBasePermission(formats strfmt.Registry) error {
	if swag.IsZero(m.KnowledgeBasePermission) { // not required
		return nil
	}

	if m.KnowledgeBasePermission != nil {
		if err := m.KnowledgeBasePermission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("KnowledgeBasePermission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("KnowledgeBasePermission")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIGroupRecord) validateListEditorPermission(formats strfmt.Registry) error {
	if swag.IsZero(m.ListEditorPermission) { // not required
		return nil
	}

	if m.ListEditorPermission != nil {
		if err := m.ListEditorPermission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ListEditorPermission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ListEditorPermission")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIGroupRecord) validateRequestsPermission(formats strfmt.Registry) error {
	if swag.IsZero(m.RequestsPermission) { // not required
		return nil
	}

	if m.RequestsPermission != nil {
		if err := m.RequestsPermission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RequestsPermission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RequestsPermission")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIGroupRecord) validateResourceEditorPermission(formats strfmt.Registry) error {
	if swag.IsZero(m.ResourceEditorPermission) { // not required
		return nil
	}

	if m.ResourceEditorPermission != nil {
		if err := m.ResourceEditorPermission.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ResourceEditorPermission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ResourceEditorPermission")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this conquest api group record based on the context it is used
func (m *ConquestAPIGroupRecord) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActionsPermission(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAssetValuationPermission(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAssetsPermission(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKnowledgeBasePermission(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateListEditorPermission(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRequestsPermission(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceEditorPermission(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIGroupRecord) contextValidateActionsPermission(ctx context.Context, formats strfmt.Registry) error {

	if m.ActionsPermission != nil {
		if err := m.ActionsPermission.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ActionsPermission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ActionsPermission")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIGroupRecord) contextValidateAssetValuationPermission(ctx context.Context, formats strfmt.Registry) error {

	if m.AssetValuationPermission != nil {
		if err := m.AssetValuationPermission.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AssetValuationPermission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AssetValuationPermission")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIGroupRecord) contextValidateAssetsPermission(ctx context.Context, formats strfmt.Registry) error {

	if m.AssetsPermission != nil {
		if err := m.AssetsPermission.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AssetsPermission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AssetsPermission")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIGroupRecord) contextValidateKnowledgeBasePermission(ctx context.Context, formats strfmt.Registry) error {

	if m.KnowledgeBasePermission != nil {
		if err := m.KnowledgeBasePermission.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("KnowledgeBasePermission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("KnowledgeBasePermission")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIGroupRecord) contextValidateListEditorPermission(ctx context.Context, formats strfmt.Registry) error {

	if m.ListEditorPermission != nil {
		if err := m.ListEditorPermission.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ListEditorPermission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ListEditorPermission")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIGroupRecord) contextValidateRequestsPermission(ctx context.Context, formats strfmt.Registry) error {

	if m.RequestsPermission != nil {
		if err := m.RequestsPermission.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RequestsPermission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RequestsPermission")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIGroupRecord) contextValidateResourceEditorPermission(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourceEditorPermission != nil {
		if err := m.ResourceEditorPermission.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ResourceEditorPermission")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ResourceEditorPermission")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConquestAPIGroupRecord) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConquestAPIGroupRecord) UnmarshalBinary(b []byte) error {
	var res ConquestAPIGroupRecord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
