// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConquestAPIJobProgressInfo conquest api job progress info
//
// swagger:model conquest_apiJobProgressInfo
type ConquestAPIJobProgressInfo struct {

	// The time that the state was last updated. State will update when one of the following changes.
	// a. job status, total_work, work_done, status_description
	// d. the tracking info used by the job (eg. objects pending and objects created)
	// Format: date-time
	LastUpdated strfmt.DateTime `json:"last_updated,omitempty"`

	// status
	Status *ConquestAPIJobStatus `json:"status,omitempty"`

	// / A short user friendly description about what's currently happening
	// / Defaults to the display name of JobStatus
	StatusDescription string `json:"status_description,omitempty"`

	// The name of the process for quick identification by the user.
	// Defaults to the display name of the JobType
	Title string `json:"title,omitempty"`

	// Total Units of work. Default is 1.
	TotalWork float64 `json:"total_work,omitempty"`

	// Units of work currently completed, progress of process is calculated using = WorkDone / TotalWork.
	// Default is 0.
	WorkDone float64 `json:"work_done,omitempty"`
}

// Validate validates this conquest api job progress info
func (m *ConquestAPIJobProgressInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIJobProgressInfo) validateLastUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdated) { // not required
		return nil
	}

	if err := validate.FormatOf("last_updated", "body", "date-time", m.LastUpdated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConquestAPIJobProgressInfo) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this conquest api job progress info based on the context it is used
func (m *ConquestAPIJobProgressInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIJobProgressInfo) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConquestAPIJobProgressInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConquestAPIJobProgressInfo) UnmarshalBinary(b []byte) error {
	var res ConquestAPIJobProgressInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
