// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConquestAPIJobState conquest api job state
//
// swagger:model conquest_apiJobState
type ConquestAPIJobState struct {

	// creation_details for when this job was submitted.
	CreationDetails *ConquestAPIJobCreationDetails `json:"creation_details,omitempty"`

	// job key
	JobKey *ConquestAPIJobKey `json:"job_key,omitempty"`

	// The progress of the job. This changes during the lifecycle of the job.
	Progress *ConquestAPIJobProgressInfo `json:"progress,omitempty"`

	// JobResult is set after the job has ended, that is, when the status is one of
	// [JobStatus_Invalid, JobStatus_Completed, JobStatus_CompletedWithError]
	Result *ConquestAPIJobResult `json:"result,omitempty"`
}

// Validate validates this conquest api job state
func (m *ConquestAPIJobState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIJobState) validateCreationDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationDetails) { // not required
		return nil
	}

	if m.CreationDetails != nil {
		if err := m.CreationDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creation_details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("creation_details")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIJobState) validateJobKey(formats strfmt.Registry) error {
	if swag.IsZero(m.JobKey) { // not required
		return nil
	}

	if m.JobKey != nil {
		if err := m.JobKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("job_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("job_key")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIJobState) validateProgress(formats strfmt.Registry) error {
	if swag.IsZero(m.Progress) { // not required
		return nil
	}

	if m.Progress != nil {
		if err := m.Progress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("progress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("progress")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIJobState) validateResult(formats strfmt.Registry) error {
	if swag.IsZero(m.Result) { // not required
		return nil
	}

	if m.Result != nil {
		if err := m.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("result")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this conquest api job state based on the context it is used
func (m *ConquestAPIJobState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreationDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJobKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProgress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIJobState) contextValidateCreationDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.CreationDetails != nil {
		if err := m.CreationDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("creation_details")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("creation_details")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIJobState) contextValidateJobKey(ctx context.Context, formats strfmt.Registry) error {

	if m.JobKey != nil {
		if err := m.JobKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("job_key")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("job_key")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIJobState) contextValidateProgress(ctx context.Context, formats strfmt.Registry) error {

	if m.Progress != nil {
		if err := m.Progress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("progress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("progress")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIJobState) contextValidateResult(ctx context.Context, formats strfmt.Registry) error {

	if m.Result != nil {
		if err := m.Result.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConquestAPIJobState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConquestAPIJobState) UnmarshalBinary(b []byte) error {
	var res ConquestAPIJobState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
