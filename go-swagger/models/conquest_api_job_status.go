// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ConquestAPIJobStatus  - JobStatus_Unknown: Unknown is an invalid state. Such a job should be logged and removed from processing.
//  - JobStatus_Invalid: Invalid is an end state. It is used to report that a job is incorrectly parameterised.
// The JobResult for this state is a JobError.
//  - JobStatus_Completed: Completed is an end state.
//  - JobStatus_CompletedWithError: CompletedWithError is an end state.
// The JobResult for this state is not a JobError. If nothing is returned it will be JobResult.empty
//  - JobStatus_Removed: CompletedWithError is an end state.
// The JobResult for this state is a JobError.
//
// swagger:model conquest_apiJobStatus
type ConquestAPIJobStatus string

func NewConquestAPIJobStatus(value ConquestAPIJobStatus) *ConquestAPIJobStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ConquestAPIJobStatus.
func (m ConquestAPIJobStatus) Pointer() *ConquestAPIJobStatus {
	return &m
}

const (

	// ConquestAPIJobStatusJobStatusUnknown captures enum value "JobStatus_Unknown"
	ConquestAPIJobStatusJobStatusUnknown ConquestAPIJobStatus = "JobStatus_Unknown"

	// ConquestAPIJobStatusJobStatusInvalid captures enum value "JobStatus_Invalid"
	ConquestAPIJobStatusJobStatusInvalid ConquestAPIJobStatus = "JobStatus_Invalid"

	// ConquestAPIJobStatusJobStatusScheduled captures enum value "JobStatus_Scheduled"
	ConquestAPIJobStatusJobStatusScheduled ConquestAPIJobStatus = "JobStatus_Scheduled"

	// ConquestAPIJobStatusJobStatusQueued captures enum value "JobStatus_Queued"
	ConquestAPIJobStatusJobStatusQueued ConquestAPIJobStatus = "JobStatus_Queued"

	// ConquestAPIJobStatusJobStatusProcessing captures enum value "JobStatus_Processing"
	ConquestAPIJobStatusJobStatusProcessing ConquestAPIJobStatus = "JobStatus_Processing"

	// ConquestAPIJobStatusJobStatusPaused captures enum value "JobStatus_Paused"
	ConquestAPIJobStatusJobStatusPaused ConquestAPIJobStatus = "JobStatus_Paused"

	// ConquestAPIJobStatusJobStatusInterrupted captures enum value "JobStatus_Interrupted"
	ConquestAPIJobStatusJobStatusInterrupted ConquestAPIJobStatus = "JobStatus_Interrupted"

	// ConquestAPIJobStatusJobStatusInterruptedWithError captures enum value "JobStatus_InterruptedWithError"
	ConquestAPIJobStatusJobStatusInterruptedWithError ConquestAPIJobStatus = "JobStatus_InterruptedWithError"

	// ConquestAPIJobStatusJobStatusCompleted captures enum value "JobStatus_Completed"
	ConquestAPIJobStatusJobStatusCompleted ConquestAPIJobStatus = "JobStatus_Completed"

	// ConquestAPIJobStatusJobStatusCompletedWithError captures enum value "JobStatus_CompletedWithError"
	ConquestAPIJobStatusJobStatusCompletedWithError ConquestAPIJobStatus = "JobStatus_CompletedWithError"

	// ConquestAPIJobStatusJobStatusRemoved captures enum value "JobStatus_Removed"
	ConquestAPIJobStatusJobStatusRemoved ConquestAPIJobStatus = "JobStatus_Removed"
)

// for schema
var conquestApiJobStatusEnum []interface{}

func init() {
	var res []ConquestAPIJobStatus
	if err := json.Unmarshal([]byte(`["JobStatus_Unknown","JobStatus_Invalid","JobStatus_Scheduled","JobStatus_Queued","JobStatus_Processing","JobStatus_Paused","JobStatus_Interrupted","JobStatus_InterruptedWithError","JobStatus_Completed","JobStatus_CompletedWithError","JobStatus_Removed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		conquestApiJobStatusEnum = append(conquestApiJobStatusEnum, v)
	}
}

func (m ConquestAPIJobStatus) validateConquestAPIJobStatusEnum(path, location string, value ConquestAPIJobStatus) error {
	if err := validate.EnumCase(path, location, value, conquestApiJobStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this conquest api job status
func (m ConquestAPIJobStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConquestAPIJobStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this conquest api job status based on context it is used
func (m ConquestAPIJobStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
