// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConquestAPIListWorkOrdersResult conquest api list work orders result
//
// swagger:model conquest_apiListWorkOrdersResult
type ConquestAPIListWorkOrdersResult struct {

	// Need to display action description in the work order form
	ActionDescription string `json:"ActionDescription,omitempty"`

	// contractor email address
	ContractorEmailAddress string `json:"ContractorEmailAddress,omitempty"`

	// Need to display action reference id in the work order form
	ReferenceID string `json:"ReferenceID,omitempty"`

	// related documents
	RelatedDocuments []*ConquestAPIDocument `json:"RelatedDocuments"`

	// reports
	Reports []*ConquestAPIReport `json:"Reports"`
}

// Validate validates this conquest api list work orders result
func (m *ConquestAPIListWorkOrdersResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRelatedDocuments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReports(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIListWorkOrdersResult) validateRelatedDocuments(formats strfmt.Registry) error {
	if swag.IsZero(m.RelatedDocuments) { // not required
		return nil
	}

	for i := 0; i < len(m.RelatedDocuments); i++ {
		if swag.IsZero(m.RelatedDocuments[i]) { // not required
			continue
		}

		if m.RelatedDocuments[i] != nil {
			if err := m.RelatedDocuments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("RelatedDocuments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("RelatedDocuments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConquestAPIListWorkOrdersResult) validateReports(formats strfmt.Registry) error {
	if swag.IsZero(m.Reports) { // not required
		return nil
	}

	for i := 0; i < len(m.Reports); i++ {
		if swag.IsZero(m.Reports[i]) { // not required
			continue
		}

		if m.Reports[i] != nil {
			if err := m.Reports[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Reports" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Reports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this conquest api list work orders result based on the context it is used
func (m *ConquestAPIListWorkOrdersResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRelatedDocuments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReports(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIListWorkOrdersResult) contextValidateRelatedDocuments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RelatedDocuments); i++ {

		if m.RelatedDocuments[i] != nil {
			if err := m.RelatedDocuments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("RelatedDocuments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("RelatedDocuments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConquestAPIListWorkOrdersResult) contextValidateReports(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Reports); i++ {

		if m.Reports[i] != nil {
			if err := m.Reports[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Reports" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Reports" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConquestAPIListWorkOrdersResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConquestAPIListWorkOrdersResult) UnmarshalBinary(b []byte) error {
	var res ConquestAPIListWorkOrdersResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
