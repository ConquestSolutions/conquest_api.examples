// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConquestAPIObjectHeader ObjectHeader is the name of the object and it's relation to other objects that are a primary part of it's description.
//
// The object for an ObjectHeader is a Hierarchy node if the parent's ObjectType is the same as the object's ObjectType
//
// swagger:model conquest_apiObjectHeader
type ConquestAPIObjectHeader struct {

	// AttributeSetKey refers to the attribute set which describes this object's shape
	AttributeSetKey *ConquestAPIObjectKey `json:"AttributeSetKey,omitempty"`

	// Depth denotes the depth of the object in the hierarchy
	Depth int32 `json:"Depth,omitempty"`

	// ObjectKey of this object
	ObjectKey *ConquestAPIObjectKey `json:"ObjectKey,omitempty"`

	// object name
	ObjectName string `json:"ObjectName,omitempty"`

	// Order of a node in a list of siblings.
	Order int32 `json:"Order,omitempty"`

	// ParentKey refers to the parent that this object is for
	ParentKey *ConquestAPIObjectKey `json:"ParentKey,omitempty"`

	// TypeKey refers to the type which determines this object's business rules
	TypeKey *ConquestAPIObjectKey `json:"TypeKey,omitempty"`
}

// Validate validates this conquest api object header
func (m *ConquestAPIObjectHeader) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributeSetKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIObjectHeader) validateAttributeSetKey(formats strfmt.Registry) error {
	if swag.IsZero(m.AttributeSetKey) { // not required
		return nil
	}

	if m.AttributeSetKey != nil {
		if err := m.AttributeSetKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AttributeSetKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AttributeSetKey")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIObjectHeader) validateObjectKey(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectKey) { // not required
		return nil
	}

	if m.ObjectKey != nil {
		if err := m.ObjectKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ObjectKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ObjectKey")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIObjectHeader) validateParentKey(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentKey) { // not required
		return nil
	}

	if m.ParentKey != nil {
		if err := m.ParentKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ParentKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ParentKey")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIObjectHeader) validateTypeKey(formats strfmt.Registry) error {
	if swag.IsZero(m.TypeKey) { // not required
		return nil
	}

	if m.TypeKey != nil {
		if err := m.TypeKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TypeKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TypeKey")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this conquest api object header based on the context it is used
func (m *ConquestAPIObjectHeader) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttributeSetKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParentKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTypeKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIObjectHeader) contextValidateAttributeSetKey(ctx context.Context, formats strfmt.Registry) error {

	if m.AttributeSetKey != nil {
		if err := m.AttributeSetKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AttributeSetKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AttributeSetKey")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIObjectHeader) contextValidateObjectKey(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectKey != nil {
		if err := m.ObjectKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ObjectKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ObjectKey")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIObjectHeader) contextValidateParentKey(ctx context.Context, formats strfmt.Registry) error {

	if m.ParentKey != nil {
		if err := m.ParentKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ParentKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ParentKey")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIObjectHeader) contextValidateTypeKey(ctx context.Context, formats strfmt.Registry) error {

	if m.TypeKey != nil {
		if err := m.TypeKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TypeKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TypeKey")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConquestAPIObjectHeader) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConquestAPIObjectHeader) UnmarshalBinary(b []byte) error {
	var res ConquestAPIObjectHeader
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
