// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConquestAPIRecordColumn conquest api record column
//
// swagger:model conquest_apiRecordColumn
type ConquestAPIRecordColumn struct {

	// alias is the column name or SQL alias in a query or user view.
	//
	// - An alias with a prefix of 2 underscores '__' are reserved for Conquest. These fields are subject to change, they're a temporary solution
	//   For example, __Title, __Subtitle
	//
	// WARNING alias is not finalized, don't write code that depends on it.
	//
	// view.column for non-calculated values defined in a Context (a selection of fields in the Field Dictionary)
	Alias string `json:"alias,omitempty"`

	// caption == alias in a user view by default
	Caption string `json:"caption,omitempty"`

	// For a polymorphic RecordSet this denotes the column group
	Group int32 `json:"group,omitempty"`

	// A list of [RecordColumn]s have multiple ValueType=ObjectKey. Identity states that
	// this RecordColumn is the identity a RecordRow
	Identity bool `json:"identity,omitempty"`

	// index is always set to a value 0 to n-1, where n is the row length of a column group
	Index int32 `json:"index,omitempty"`

	// relation
	Relation *ConquestAPIRelation `json:"relation,omitempty"`

	// If ValueType == ObjectKey, Relation is always set
	ValueType *ConquestAPIValueType `json:"valueType,omitempty"`
}

// Validate validates this conquest api record column
func (m *ConquestAPIRecordColumn) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRelation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValueType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIRecordColumn) validateRelation(formats strfmt.Registry) error {
	if swag.IsZero(m.Relation) { // not required
		return nil
	}

	if m.Relation != nil {
		if err := m.Relation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("relation")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIRecordColumn) validateValueType(formats strfmt.Registry) error {
	if swag.IsZero(m.ValueType) { // not required
		return nil
	}

	if m.ValueType != nil {
		if err := m.ValueType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("valueType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("valueType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this conquest api record column based on the context it is used
func (m *ConquestAPIRecordColumn) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRelation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValueType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIRecordColumn) contextValidateRelation(ctx context.Context, formats strfmt.Registry) error {

	if m.Relation != nil {
		if err := m.Relation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("relation")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIRecordColumn) contextValidateValueType(ctx context.Context, formats strfmt.Registry) error {

	if m.ValueType != nil {
		if err := m.ValueType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("valueType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("valueType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConquestAPIRecordColumn) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConquestAPIRecordColumn) UnmarshalBinary(b []byte) error {
	var res ConquestAPIRecordColumn
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
