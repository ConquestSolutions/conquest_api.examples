// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConquestAPIRecordSet In a RecordSet, for a column_group, the column order in columns list corresponds with the columns in a record row
//
// swagger:model conquest_apiRecordSet
type ConquestAPIRecordSet struct {

	// columns
	Columns []*ConquestAPIRecordColumn `json:"columns"`

	// context descriptor
	ContextDescriptor *ConquestAPIContextDescriptor `json:"contextDescriptor,omitempty"`

	// context descriptors for groups
	ContextDescriptorsForGroups []*ConquestAPIContextDescriptor `json:"contextDescriptorsForGroups"`

	// cursor
	Cursor *ConquestAPIRecordSetCursor `json:"cursor,omitempty"`

	// rows
	Rows []*ConquestAPIRecordRow `json:"rows"`
}

// Validate validates this conquest api record set
func (m *ConquestAPIRecordSet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColumns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContextDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContextDescriptorsForGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCursor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRows(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIRecordSet) validateColumns(formats strfmt.Registry) error {
	if swag.IsZero(m.Columns) { // not required
		return nil
	}

	for i := 0; i < len(m.Columns); i++ {
		if swag.IsZero(m.Columns[i]) { // not required
			continue
		}

		if m.Columns[i] != nil {
			if err := m.Columns[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("columns" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("columns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConquestAPIRecordSet) validateContextDescriptor(formats strfmt.Registry) error {
	if swag.IsZero(m.ContextDescriptor) { // not required
		return nil
	}

	if m.ContextDescriptor != nil {
		if err := m.ContextDescriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contextDescriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contextDescriptor")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIRecordSet) validateContextDescriptorsForGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.ContextDescriptorsForGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.ContextDescriptorsForGroups); i++ {
		if swag.IsZero(m.ContextDescriptorsForGroups[i]) { // not required
			continue
		}

		if m.ContextDescriptorsForGroups[i] != nil {
			if err := m.ContextDescriptorsForGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contextDescriptorsForGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("contextDescriptorsForGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConquestAPIRecordSet) validateCursor(formats strfmt.Registry) error {
	if swag.IsZero(m.Cursor) { // not required
		return nil
	}

	if m.Cursor != nil {
		if err := m.Cursor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cursor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cursor")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIRecordSet) validateRows(formats strfmt.Registry) error {
	if swag.IsZero(m.Rows) { // not required
		return nil
	}

	for i := 0; i < len(m.Rows); i++ {
		if swag.IsZero(m.Rows[i]) { // not required
			continue
		}

		if m.Rows[i] != nil {
			if err := m.Rows[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rows" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rows" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this conquest api record set based on the context it is used
func (m *ConquestAPIRecordSet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateColumns(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContextDescriptor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContextDescriptorsForGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCursor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRows(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIRecordSet) contextValidateColumns(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Columns); i++ {

		if m.Columns[i] != nil {
			if err := m.Columns[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("columns" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("columns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConquestAPIRecordSet) contextValidateContextDescriptor(ctx context.Context, formats strfmt.Registry) error {

	if m.ContextDescriptor != nil {
		if err := m.ContextDescriptor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contextDescriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contextDescriptor")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIRecordSet) contextValidateContextDescriptorsForGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ContextDescriptorsForGroups); i++ {

		if m.ContextDescriptorsForGroups[i] != nil {
			if err := m.ContextDescriptorsForGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contextDescriptorsForGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("contextDescriptorsForGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConquestAPIRecordSet) contextValidateCursor(ctx context.Context, formats strfmt.Registry) error {

	if m.Cursor != nil {
		if err := m.Cursor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cursor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cursor")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIRecordSet) contextValidateRows(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Rows); i++ {

		if m.Rows[i] != nil {
			if err := m.Rows[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rows" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rows" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConquestAPIRecordSet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConquestAPIRecordSet) UnmarshalBinary(b []byte) error {
	var res ConquestAPIRecordSet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
