// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConquestAPIRequestEntity RequestEntity is comprised of the Request's Record and auxiliary fields (calculated, related)
//
// swagger:model conquest_apiRequestEntity
type ConquestAPIRequestEntity struct {

	// arq ID
	ArqID int32 `json:"ArqID,omitempty"`

	// completed
	Completed bool `json:"Completed,omitempty"`

	// completed by
	CompletedBy string `json:"CompletedBy,omitempty"`

	// document location
	DocumentLocation string `json:"DocumentLocation,omitempty"`

	// edit date
	// Format: date-time
	EditDate strfmt.DateTime `json:"EditDate,omitempty"`

	// editor
	Editor string `json:"Editor,omitempty"`

	// map style
	MapStyle *ConquestAPIStyle `json:"MapStyle,omitempty"`

	// record
	Record *ConquestAPIRequestRecord `json:"Record,omitempty"`

	// reference ID
	ReferenceID string `json:"ReferenceID,omitempty"`

	// lock
	Lock *ConquestAPILock `json:"lock,omitempty"`
}

// Validate validates this conquest api request entity
func (m *ConquestAPIRequestEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEditDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMapStyle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecord(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLock(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIRequestEntity) validateEditDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EditDate) { // not required
		return nil
	}

	if err := validate.FormatOf("EditDate", "body", "date-time", m.EditDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ConquestAPIRequestEntity) validateMapStyle(formats strfmt.Registry) error {
	if swag.IsZero(m.MapStyle) { // not required
		return nil
	}

	if m.MapStyle != nil {
		if err := m.MapStyle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MapStyle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MapStyle")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIRequestEntity) validateRecord(formats strfmt.Registry) error {
	if swag.IsZero(m.Record) { // not required
		return nil
	}

	if m.Record != nil {
		if err := m.Record.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Record")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Record")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIRequestEntity) validateLock(formats strfmt.Registry) error {
	if swag.IsZero(m.Lock) { // not required
		return nil
	}

	if m.Lock != nil {
		if err := m.Lock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lock")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this conquest api request entity based on the context it is used
func (m *ConquestAPIRequestEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMapStyle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecord(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIRequestEntity) contextValidateMapStyle(ctx context.Context, formats strfmt.Registry) error {

	if m.MapStyle != nil {
		if err := m.MapStyle.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MapStyle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MapStyle")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIRequestEntity) contextValidateRecord(ctx context.Context, formats strfmt.Registry) error {

	if m.Record != nil {
		if err := m.Record.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Record")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Record")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIRequestEntity) contextValidateLock(ctx context.Context, formats strfmt.Registry) error {

	if m.Lock != nil {
		if err := m.Lock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lock")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConquestAPIRequestEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConquestAPIRequestEntity) UnmarshalBinary(b []byte) error {
	var res ConquestAPIRequestEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
