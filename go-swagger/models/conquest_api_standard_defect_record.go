// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConquestAPIStandardDefectRecord conquest api standard defect record
//
// swagger:model conquest_apiStandardDefectRecord
type ConquestAPIStandardDefectRecord struct {

	// completed icon file
	CompletedIconFile *ConquestAPIStyle `json:"CompletedIconFile,omitempty"`

	// default severity ID
	DefaultSeverityID int32 `json:"DefaultSeverityID,omitempty"`

	// icon file
	IconFile *ConquestAPIStyle `json:"IconFile,omitempty"`

	// layout
	Layout string `json:"Layout,omitempty"`

	// ordr
	Ordr int32 `json:"Ordr,omitempty"`

	// response times
	ResponseTimes *ConquestAPIResponseTimeList `json:"ResponseTimes,omitempty"`

	// std defect description
	StdDefectDescription string `json:"StdDefectDescription,omitempty"`
}

// Validate validates this conquest api standard defect record
func (m *ConquestAPIStandardDefectRecord) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompletedIconFile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIconFile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponseTimes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIStandardDefectRecord) validateCompletedIconFile(formats strfmt.Registry) error {
	if swag.IsZero(m.CompletedIconFile) { // not required
		return nil
	}

	if m.CompletedIconFile != nil {
		if err := m.CompletedIconFile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CompletedIconFile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CompletedIconFile")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIStandardDefectRecord) validateIconFile(formats strfmt.Registry) error {
	if swag.IsZero(m.IconFile) { // not required
		return nil
	}

	if m.IconFile != nil {
		if err := m.IconFile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("IconFile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("IconFile")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIStandardDefectRecord) validateResponseTimes(formats strfmt.Registry) error {
	if swag.IsZero(m.ResponseTimes) { // not required
		return nil
	}

	if m.ResponseTimes != nil {
		if err := m.ResponseTimes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ResponseTimes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ResponseTimes")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this conquest api standard defect record based on the context it is used
func (m *ConquestAPIStandardDefectRecord) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCompletedIconFile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIconFile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResponseTimes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConquestAPIStandardDefectRecord) contextValidateCompletedIconFile(ctx context.Context, formats strfmt.Registry) error {

	if m.CompletedIconFile != nil {
		if err := m.CompletedIconFile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CompletedIconFile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CompletedIconFile")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIStandardDefectRecord) contextValidateIconFile(ctx context.Context, formats strfmt.Registry) error {

	if m.IconFile != nil {
		if err := m.IconFile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("IconFile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("IconFile")
			}
			return err
		}
	}

	return nil
}

func (m *ConquestAPIStandardDefectRecord) contextValidateResponseTimes(ctx context.Context, formats strfmt.Registry) error {

	if m.ResponseTimes != nil {
		if err := m.ResponseTimes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ResponseTimes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ResponseTimes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConquestAPIStandardDefectRecord) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConquestAPIStandardDefectRecord) UnmarshalBinary(b []byte) error {
	var res ConquestAPIStandardDefectRecord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
